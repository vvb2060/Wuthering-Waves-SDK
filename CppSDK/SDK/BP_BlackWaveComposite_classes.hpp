#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlackWaveComposite

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlackWaveComposite.BP_BlackWaveComposite_C
// 0x0030 (0x02E0 - 0x02B0)
class ABP_BlackWaveComposite_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MDI;                                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANinjaLive_C*                           fluidR;                                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANinjaLive_C*                           fluidG;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 OutputRT;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_BlackWaveComposite(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlackWaveComposite_C">();
	}
	static class ABP_BlackWaveComposite_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlackWaveComposite_C>();
	}
};
static_assert(alignof(ABP_BlackWaveComposite_C) == 0x000008, "Wrong alignment on ABP_BlackWaveComposite_C");
static_assert(sizeof(ABP_BlackWaveComposite_C) == 0x0002E0, "Wrong size on ABP_BlackWaveComposite_C");
static_assert(offsetof(ABP_BlackWaveComposite_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_BlackWaveComposite_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlackWaveComposite_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_BlackWaveComposite_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BlackWaveComposite_C, MDI) == 0x0002C0, "Member 'ABP_BlackWaveComposite_C::MDI' has a wrong offset!");
static_assert(offsetof(ABP_BlackWaveComposite_C, fluidR) == 0x0002C8, "Member 'ABP_BlackWaveComposite_C::fluidR' has a wrong offset!");
static_assert(offsetof(ABP_BlackWaveComposite_C, fluidG) == 0x0002D0, "Member 'ABP_BlackWaveComposite_C::fluidG' has a wrong offset!");
static_assert(offsetof(ABP_BlackWaveComposite_C, OutputRT) == 0x0002D8, "Member 'ABP_BlackWaveComposite_C::OutputRT' has a wrong offset!");

}

