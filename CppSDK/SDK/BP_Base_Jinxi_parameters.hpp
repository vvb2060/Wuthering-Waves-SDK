#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_Jinxi

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Base_Jinxi.BP_Base_Jinxi_C.FightCommand
// 0x0180 (0x0180 - 0x0000)
struct BP_Base_Jinxi_C_FightCommand final
{
public:
	bool                                          isInAir;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSkill_ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_1;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSkill_ReturnValue_1;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0058(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0078(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0098(0x0010)(ReferenceParm)
	TArray<class FName>                           K2Node_MakeArray_Array_1;                          // 0x00A8(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x00B8(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_ReturnValue_1;                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_2;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSkill_ReturnValue_2;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00E0(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0100(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0120(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_3;             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0138(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSkill_ReturnValue_3;                 // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue_2;                // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14E[0x2];                                      // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_4;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSkill_ReturnValue_4;                 // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue_3;                // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_5;             // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_ReturnValue_4;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginSkill_ReturnValue_5;                 // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue_6;             // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsAnyTag_ReturnValue;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginSkill_ReturnValue_6;                 // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue_5;                // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Base_Jinxi_C_FightCommand) == 0x000008, "Wrong alignment on BP_Base_Jinxi_C_FightCommand");
static_assert(sizeof(BP_Base_Jinxi_C_FightCommand) == 0x000180, "Wrong size on BP_Base_Jinxi_C_FightCommand");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, isInAir) == 0x000000, "Member 'BP_Base_Jinxi_C_FightCommand::isInAir' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Base_Jinxi_C_FightCommand::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'BP_Base_Jinxi_C_FightCommand::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___int_Array_Index_Variable) == 0x000010, "Member 'BP_Base_Jinxi_C_FightCommand::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___bool_True_if_break_was_hit_Variable_1) == 0x000015, "Member 'BP_Base_Jinxi_C_FightCommand::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___int_Array_Index_Variable_1) == 0x000018, "Member 'BP_Base_Jinxi_C_FightCommand::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001C, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, ___int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_Base_Jinxi_C_FightCommand::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue) == 0x000028, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue) == 0x000034, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue) == 0x000035, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, K2Node_MakeArray_Array) == 0x000038, "Member 'BP_Base_Jinxi_C_FightCommand::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_1) == 0x000048, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_1) == 0x000050, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000058, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000078, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000098, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, K2Node_MakeArray_Array_1) == 0x0000A8, "Member 'BP_Base_Jinxi_C_FightCommand::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue_1) == 0x0000C4, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Array_Length_ReturnValue) == 0x0000C8, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BooleanAND_ReturnValue) == 0x0000CD, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_2) == 0x0000D0, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_2) == 0x0000D8, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000E0, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000100, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000120, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_3) == 0x000130, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_3) == 0x000144, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue_2) == 0x000145, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Array_Length_ReturnValue_1) == 0x000148, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_Less_IntInt_ReturnValue_1) == 0x00014C, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BooleanAND_ReturnValue_1) == 0x00014D, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_4) == 0x000150, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_4) == 0x000158, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue_3) == 0x000159, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_5) == 0x000160, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue_4) == 0x000168, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_5) == 0x000169, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_GetSkillTarget_ReturnValue_6) == 0x000170, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_GetSkillTarget_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsAnyTag_ReturnValue) == 0x000178, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsAnyTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_BeginSkill_ReturnValue_6) == 0x000179, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_BeginSkill_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Base_Jinxi_C_FightCommand, CallFunc_ContainsTag_ReturnValue_5) == 0x00017A, "Member 'BP_Base_Jinxi_C_FightCommand::CallFunc_ContainsTag_ReturnValue_5' has a wrong offset!");

}

