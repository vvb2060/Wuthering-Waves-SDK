#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPerformance

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "KuroPerformance_structs.hpp"


namespace SDK
{

// Class KuroPerformance.KuroPerformanceBPLibrary
// 0x0000 (0x0030 - 0x0030)
class UKuroPerformanceBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BoostCPU(int32 FrequencyPercentage, int32 BoostDurationInMilliSecond, bool bBoostMemory);
	static bool BoostGPU(int32 FrequencyPercentage, int32 BoostDurationInMilliSecond, bool bBoostMemory);
	static EKuroBoostFlags GetBoostFlags(bool bCPU, bool bWithMemory);
	static class FString GetCurrentActivePerformanceAdaptiveModuleName();
	static int32 GetCurrentAndroidDeviceRequireAdaptiveModule();
	static void GetCurrentTemperatureData(const TDelegate<void(bool bResult, float CurrentTemperature, float TempBudget)>& Delegate);
	static class FString GetInitReturnMessage();
	static int32 GetMaxBoostDurationInSecondForCPU();
	static int32 GetMaxBoostDurationInSecondForGPU();
	static EKuroModuleStatus GetPerformanceAdaptiveStatus();
	static int32 GetRegisterGameThreadId();
	static int32 GetRegisterRenderThreadId();
	static int32 GetRegisterRHIThreadId();
	static EKuroBoostFlags GetSupportedBoostFlag();
	static void GetTickedPerformanceReportAndAdvice(const TDelegate<void(const struct FKuroPerformanceReport& PerformanceReport)>& ReportDelegate);
	static bool InitGameConfig(const struct FKuroGameConfig& GameConfig);
	static bool InitGameConfigFPS(int32 FPS);
	static bool InitGameConfigSceneTransition(bool Enable);
	static bool IsPerformanceAdaptiveInitialize();
	static bool IsPerformanceAdaptiveRunning();
	static bool IsPredictCPUWorkloadSupported();
	static bool IsPredictGPUWorkloadSupported();
	static bool PredictWorkload(int32 CPULoadScale, int32 GPULoadScale);
	static void QueryBoostCPU(struct FKuroBoostQueryResult* BoostQueryResult);
	static void QueryBoostGPU(struct FKuroBoostQueryResult* BoostQueryResult);
	static bool RegisterCriticalThreads(int32 GameTid, int32 RenderTid, int32 RHITid);
	static bool SetForeground(bool bForeGround);
	static void SetPerformanceAdaptiveStatus(bool bEnable);
	static bool SetTargetFPS(int32 FPS, int32 ThreadId);
	static bool StartPerformanceAdaptiveService(int32 EServiceFlags);
	static bool StartService(int32 Service);
	static bool StopPerformanceAdaptiveService(int32 EServiceFlags);
	static bool StopService(int32 Service);
	static bool SyncRenderingFrameID(int32 FrameId);
	static int32 Tick();
	static int32 TickPerformanceReport();
	static int32 TickPerfReport();
	static bool UnregisterCriticalThreads(int32 GameTid, int32 RenderTid, int32 RHITid);
	static bool UpdateGameConfig(const struct FKuroGameConfig& GameConfig);
	static bool UpdateGameConfigFPS(int32 FPS);
	static bool UpdateGameConfigSceneTransition(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroPerformanceBPLibrary">();
	}
	static class UKuroPerformanceBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroPerformanceBPLibrary>();
	}
};
static_assert(alignof(UKuroPerformanceBPLibrary) == 0x000008, "Wrong alignment on UKuroPerformanceBPLibrary");
static_assert(sizeof(UKuroPerformanceBPLibrary) == 0x000030, "Wrong size on UKuroPerformanceBPLibrary");

}

