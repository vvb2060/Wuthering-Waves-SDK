#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplitScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplitScreen.BP_SplitScreen_C
// 0x0170 (0x0420 - 0x02B0)
class ABP_SplitScreen_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight3;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight2;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CharacterActor_3;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CharacterActor_2;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CharacterActor_1;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           MPC;                                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Angle_LinePosition__LineDistance;                  // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_1;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_2;                                       // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_3;                                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight1_Location;                              // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight2_Location;                              // 0x031C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight3_Location;                              // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight1_ToonLightColor;                        // 0x0334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight2_ToonLightColor;                        // 0x0344(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight3_ToonLightColor;                        // 0x0354(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong1;                      // 0x0364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong2;                      // 0x0374(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong3;                      // 0x0384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai1;                        // 0x0394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai2;                        // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai3;                        // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color1;                         // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color2;                         // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color3;                         // 0x03E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         MeshPart;                                          // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Handle1;                                           // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle2;                                           // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle3;                                           // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent1;                  // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent2;                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent3;                  // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SplitScreen(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Start();
	void End();
	void InitKuroMaterialController(class UKuroMaterialControllerComponent* KuroMaterialControllerComponent, class UChildActorComponent* CharacterActorComponent, class UPointLightComponent* PointLightComponent, const struct FVector& PointLight_Location, const struct FLinearColor& PointLight_ToonLightColor, const struct FLinearColor& EyeLightSimulation_TongKong, const struct FLinearColor& EyeLightSimulation_YanBai, const struct FLinearColor& EyeLightSimulation_Color, float E_LinkPos, bool Channel0, bool Channel1, bool Channel2, int32* returnHandle);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplitScreen_C">();
	}
	static class ABP_SplitScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplitScreen_C>();
	}
};
static_assert(alignof(ABP_SplitScreen_C) == 0x000008, "Wrong alignment on ABP_SplitScreen_C");
static_assert(sizeof(ABP_SplitScreen_C) == 0x000420, "Wrong size on ABP_SplitScreen_C");
static_assert(offsetof(ABP_SplitScreen_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_SplitScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight3) == 0x0002B8, "Member 'ABP_SplitScreen_C::PointLight3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight2) == 0x0002C0, "Member 'ABP_SplitScreen_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight1) == 0x0002C8, "Member 'ABP_SplitScreen_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, CharacterActor_3) == 0x0002D0, "Member 'ABP_SplitScreen_C::CharacterActor_3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, CharacterActor_2) == 0x0002D8, "Member 'ABP_SplitScreen_C::CharacterActor_2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, CharacterActor_1) == 0x0002E0, "Member 'ABP_SplitScreen_C::CharacterActor_1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_SplitScreen_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, MPC) == 0x0002F0, "Member 'ABP_SplitScreen_C::MPC' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, Angle_LinePosition__LineDistance) == 0x0002F8, "Member 'ABP_SplitScreen_C::Angle_LinePosition__LineDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, E_LinkPos_1) == 0x000304, "Member 'ABP_SplitScreen_C::E_LinkPos_1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, E_LinkPos_2) == 0x000308, "Member 'ABP_SplitScreen_C::E_LinkPos_2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, E_LinkPos_3) == 0x00030C, "Member 'ABP_SplitScreen_C::E_LinkPos_3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight1_Location) == 0x000310, "Member 'ABP_SplitScreen_C::PointLight1_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight2_Location) == 0x00031C, "Member 'ABP_SplitScreen_C::PointLight2_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight3_Location) == 0x000328, "Member 'ABP_SplitScreen_C::PointLight3_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight1_ToonLightColor) == 0x000334, "Member 'ABP_SplitScreen_C::PointLight1_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight2_ToonLightColor) == 0x000344, "Member 'ABP_SplitScreen_C::PointLight2_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, PointLight3_ToonLightColor) == 0x000354, "Member 'ABP_SplitScreen_C::PointLight3_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_TongKong1) == 0x000364, "Member 'ABP_SplitScreen_C::EyeLightSimulation_TongKong1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_TongKong2) == 0x000374, "Member 'ABP_SplitScreen_C::EyeLightSimulation_TongKong2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_TongKong3) == 0x000384, "Member 'ABP_SplitScreen_C::EyeLightSimulation_TongKong3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_YanBai1) == 0x000394, "Member 'ABP_SplitScreen_C::EyeLightSimulation_YanBai1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_YanBai2) == 0x0003A4, "Member 'ABP_SplitScreen_C::EyeLightSimulation_YanBai2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_YanBai3) == 0x0003B4, "Member 'ABP_SplitScreen_C::EyeLightSimulation_YanBai3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_Color1) == 0x0003C4, "Member 'ABP_SplitScreen_C::EyeLightSimulation_Color1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_Color2) == 0x0003D4, "Member 'ABP_SplitScreen_C::EyeLightSimulation_Color2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, EyeLightSimulation_Color3) == 0x0003E4, "Member 'ABP_SplitScreen_C::EyeLightSimulation_Color3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, MeshPart) == 0x0003F4, "Member 'ABP_SplitScreen_C::MeshPart' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, Handle1) == 0x0003F8, "Member 'ABP_SplitScreen_C::Handle1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, Handle2) == 0x0003FC, "Member 'ABP_SplitScreen_C::Handle2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, Handle3) == 0x000400, "Member 'ABP_SplitScreen_C::Handle3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, KuroMaterialControllerComponent1) == 0x000408, "Member 'ABP_SplitScreen_C::KuroMaterialControllerComponent1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, KuroMaterialControllerComponent2) == 0x000410, "Member 'ABP_SplitScreen_C::KuroMaterialControllerComponent2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_C, KuroMaterialControllerComponent3) == 0x000418, "Member 'ABP_SplitScreen_C::KuroMaterialControllerComponent3' has a wrong offset!");

}

