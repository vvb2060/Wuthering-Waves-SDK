#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Jinxi

#include "Basic.hpp"

#include "sInputCommand_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.攻击按下
// 0x0728 (0x0728 - 0x0000)
struct BP_Input_Jinxi_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0068(0x0020)()
	int32                                         ___int_Variable;                                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0090(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_1;                                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_2;                                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00B8(0x0020)()
	int32                                         ___int_Variable_3;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x00E0(0x0010)(ReferenceParm)
	int32                                         CallFunc_____________Rouge_____ID;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x00F8(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_4;                                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0110(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0124(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_5;                                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_____________Rouge_____ID_1;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x0148(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x015C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0178(0x0020)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_3; // 0x01A0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x01C0(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_3;                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_6;                                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x01E0(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x01F8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_4; // 0x0218(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x0230(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0244(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_7;                                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0257(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ___int_Variable_8;                                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc______________Rouge_____ID;                // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0264(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x0278(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6; // 0x0298(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7; // 0x02B8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_5; // 0x02D8(0x0010)(ReferenceParm)
	int32                                         ___int_Variable_9;                                 // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x02EC(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_10;                                // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8; // 0x0308(0x0020)()
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x032A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x032B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9; // 0x0330(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0368(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_2;                         // 0x0398(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x03C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_3;          // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x03D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x03E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_4;          // 0x03EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EB[0x5];                                      // 0x03EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x03F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0401(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_402[0x2];                                      // 0x0402(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_4;                    // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x0408(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41B[0x1];                                      // 0x041B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_3;                     // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10; // 0x0428(0x0020)()
	int32                                         ___int_Variable_11;                                // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_4;                     // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x0450(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_3;                         // 0x0464(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_5;          // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x0474(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x048C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4; // 0x04A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_5;                     // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_4;                         // 0x04B8(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5; // 0x04C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_12;                                // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11; // 0x04E0(0x0020)()
	int32                                         CallFunc______________Rouge_____ID_1;              // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_6; // 0x0508(0x0010)(ReferenceParm)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_12;        // 0x0518(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_5;                         // 0x052C(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_13;                                // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_6;          // 0x0545(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0546(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_547[0x1];                                      // 0x0547(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_5;                    // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12; // 0x0550(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x0570(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0582(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_583[0x1];                                      // 0x0583(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_6;                     // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_6;                         // 0x058C(0x000C)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5; // 0x0598(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5; // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_6;                    // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_____________Rouge_____ID_2;               // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x05C0(0x0010)(ReferenceParm)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_13;        // 0x05D0(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_7;                         // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x05F0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_8;                         // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0608(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0618(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_9;                         // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_10;                        // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_3;         // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x0638(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_11;                        // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6; // 0x0650(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_4;         // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662[0x6];                                      // 0x0662(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_5;                          // 0x0668(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_12;                        // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7; // 0x0680(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_5;         // 0x0691(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692[0x6];                                      // 0x0692(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_6;                          // 0x0698(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8; // 0x06A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9[0x3];                                      // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_13;                        // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_6;         // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_9; // 0x06C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_10; // 0x06E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_10;    // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_11; // 0x06F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_11;    // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_12; // 0x0710(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_12;    // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Jinxi_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_攻击按下");
static_assert(sizeof(BP_Input_Jinxi_C_攻击按下) == 0x000728, "Wrong size on BP_Input_Jinxi_C_攻击按下");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Jinxi_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Jinxi_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc______ReturnValue) == 0x000038, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000050, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000068, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable) == 0x000088, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000090, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable) == 0x0000A4, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x0000A8, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_1) == 0x0000AC, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x0000B0, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B1, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x0000B2, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_2) == 0x0000B4, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_3) == 0x0000D8, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x0000E0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_____________Rouge_____ID) == 0x0000F0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_____________Rouge_____ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x0000F4, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x0000F8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_4) == 0x00010C, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000110, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000124, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000138, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x00013C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_5) == 0x000140, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_____________Rouge_____ID_1) == 0x000144, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_____________Rouge_____ID_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x000148, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x00015C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x000170, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000178, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_3) == 0x0001A0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001B0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_3) == 0x0001B4, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x0001B8, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001BC, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0001C0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_3) == 0x0001D4, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_6) == 0x0001D8, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001DC, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x0001E0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001F4, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x0001F8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_4) == 0x000218, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_4) == 0x000228, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_1) == 0x00022C, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x000230, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item) == 0x000244, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_7) == 0x000250, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000254, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000255, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000256, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x000257, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_8) == 0x000258, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x00025C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc______________Rouge_____ID) == 0x000260, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc______________Rouge_____ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000264, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x000278, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6) == 0x000298, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7) == 0x0002B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_5) == 0x0002D8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_9) == 0x0002E8, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x0002EC, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_5) == 0x0002F8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_10) == 0x0002FC, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x000300, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000301, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8) == 0x000308, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000328, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000329, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x00032A, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x00032B, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9) == 0x000330, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000350, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000360, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000368, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000378, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000380, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000390, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_2) == 0x000394, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x000398, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x0003A8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x0003B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x0003C0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x0003D0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_3) == 0x0003D1, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x0003D8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x0003E8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_3) == 0x0003E9, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_4) == 0x0003EA, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0003F0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000400, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_4) == 0x000401, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_4) == 0x000404, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000408, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000418, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_3) == 0x000419, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x00041A, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_4) == 0x00041C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_3) == 0x000420, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10) == 0x000428, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_11) == 0x000448, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_4) == 0x00044C, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x000450, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x000464, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_5) == 0x000470, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x000474, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_5) == 0x000488, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_4) == 0x000489, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x00048C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x0004A0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x0004B0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_5) == 0x0004B4, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x0004B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x0004C8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x0004D8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_12) == 0x0004DC, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11) == 0x0004E0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc______________Rouge_____ID_1) == 0x000500, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc______________Rouge_____ID_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_6) == 0x000508, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_12) == 0x000518, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x00052C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Length_ReturnValue_6) == 0x000538, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_4) == 0x00053C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Variable_13) == 0x000540, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_5) == 0x000544, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___bool_True_if_break_was_hit_Variable_6) == 0x000545, "Member 'BP_Input_Jinxi_C_攻击按下::___bool_True_if_break_was_hit_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_6) == 0x000546, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_5) == 0x000548, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12) == 0x000550, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x000570, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x000580, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_5) == 0x000581, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_6) == 0x000582, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_5) == 0x000584, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Array_Index_Variable_6) == 0x000588, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_6) == 0x00058C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5) == 0x000598, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5) == 0x0005A8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, ___int_Loop_Counter_Variable_6) == 0x0005AC, "Member 'BP_Input_Jinxi_C_攻击按下::___int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_6) == 0x0005B0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_6) == 0x0005B4, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_7) == 0x0005B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_____________Rouge_____ID_2) == 0x0005BC, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_____________Rouge_____ID_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array) == 0x0005C0, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_13) == 0x0005D0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_7) == 0x0005E4, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0005E8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_1) == 0x0005F0, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_8) == 0x000600, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000604, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_2) == 0x000608, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_3) == 0x000618, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_9) == 0x000628, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_10) == 0x00062C, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x000630, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_3) == 0x000631, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_4) == 0x000638, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_11) == 0x000648, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000650, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x000660, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_4) == 0x000661, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_5) == 0x000668, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_12) == 0x000678, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x000680, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x000690, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_5) == 0x000691, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, K2Node_MakeArray_Array_6) == 0x000698, "Member 'BP_Input_Jinxi_C_攻击按下::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x0006A8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x0006B8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_Get_Item_13) == 0x0006BC, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_Get_Item_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_6) == 0x0006C0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_9) == 0x0006C8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x0006D8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_10) == 0x0006E0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_10) == 0x0006F0, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_11) == 0x0006F8, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_11) == 0x000708, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_12) == 0x000710, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_12) == 0x000720, "Member 'BP_Input_Jinxi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_12' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.大招按下
// 0x003C (0x003C - 0x0000)
struct BP_Input_Jinxi_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0024(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Jinxi_C_大招按下) == 0x000004, "Wrong alignment on BP_Input_Jinxi_C_大招按下");
static_assert(sizeof(BP_Input_Jinxi_C_大招按下) == 0x00003C, "Wrong size on BP_Input_Jinxi_C_大招按下");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, time) == 0x000000, "Member 'BP_Input_Jinxi_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Jinxi_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000018, "Member 'BP_Input_Jinxi_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x00001C, "Member 'BP_Input_Jinxi_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000020, "Member 'BP_Input_Jinxi_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000024, "Member 'BP_Input_Jinxi_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Input_Jinxi_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.攻击长按
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Input_Jinxi_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue; // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0070(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Jinxi_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_攻击长按");
static_assert(sizeof(BP_Input_Jinxi_C_攻击长按) == 0x0000A0, "Wrong size on BP_Input_Jinxi_C_攻击长按");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Jinxi_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Jinxi_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000050, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x000054, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue) == 0x000069, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x00006A, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00006B, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x00006C, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x00006D, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_BooleanOR_ReturnValue_1) == 0x00006E, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000070, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000088, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000098, "Member 'BP_Input_Jinxi_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.技能1按下
// 0x00F8 (0x00F8 - 0x0000)
struct BP_Input_Jinxi_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0094(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x00BC(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00E4(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Jinxi_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_技能1按下");
static_assert(sizeof(BP_Input_Jinxi_C_技能1按下) == 0x0000F8, "Wrong size on BP_Input_Jinxi_C_技能1按下");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Jinxi_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Jinxi_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x000050, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000054, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000068, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000078, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000080, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000090, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000094, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0000A8, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc___1___ReturnValue) == 0x0000BC, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000D0, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000E0, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000E4, "Member 'BP_Input_Jinxi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.闪避按下
// 0x0208 (0x0208 - 0x0000)
struct BP_Input_Jinxi_C_闪避按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0048(0x0020)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMoveAxisInput_ReturnValue;             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMoveAxisInput_ReturnValue_1;           // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMoveAxisInput_ReturnValue_2;           // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x00A8(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x00C8(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x00DC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00F8(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0118(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x012C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0140(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0160(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue_1;           // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x5];                                      // 0x0193(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x01F4(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Jinxi_C_闪避按下) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_闪避按下");
static_assert(sizeof(BP_Input_Jinxi_C_闪避按下) == 0x000208, "Wrong size on BP_Input_Jinxi_C_闪避按下");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, time) == 0x000000, "Member 'BP_Input_Jinxi_C_闪避按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, ReturnValue) == 0x000004, "Member 'BP_Input_Jinxi_C_闪避按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000018, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000028, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00002A, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002B, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_BooleanOR_ReturnValue) == 0x00002D, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000030, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000040, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000048, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000068, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000070, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000080, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_GetTagCount_ReturnValue) == 0x000084, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000088, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000090, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x0000A0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMoveAxisInput_ReturnValue) == 0x0000A1, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMoveAxisInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMoveAxisInput_ReturnValue_1) == 0x0000A2, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMoveAxisInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasMoveAxisInput_ReturnValue_2) == 0x0000A3, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasMoveAxisInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x0000C8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x0000DC, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CanResponseInput_ReturnValue) == 0x0000F0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000F8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000118, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x00012C, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000140, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000160, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000180, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000190, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_CanResponseInput_ReturnValue_1) == 0x000191, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_CanResponseInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000192, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000198, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x0001A8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0001A9, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x0001AA, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_BooleanAND_ReturnValue_1) == 0x0001AB, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_BooleanOR_ReturnValue_1) == 0x0001AC, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x0001B0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x0001C0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x0001C8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x0001D8, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x0001E0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x0001F0, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_闪避按下, CallFunc______ReturnValue) == 0x0001F4, "Member 'BP_Input_Jinxi_C_闪避按下::CallFunc______ReturnValue' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.判断是否需要替换强化技能_Rouge
// 0x0028 (0x0028 - 0x0000)
struct BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge final
{
public:
	int32                                         技能ID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         输出技能ID;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge");
static_assert(sizeof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge) == 0x000028, "Wrong size on BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge, 技能ID) == 0x000000, "Member 'BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge::技能ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge, 输出技能ID) == 0x000004, "Member 'BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge::输出技能ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000010, "Member 'BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000020, "Member 'BP_Input_Jinxi_C_判断是否需要替换强化技能_Rouge::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Jinxi.BP_Input_Jinxi_C.判断是否要替换普通攻击_Rouge
// 0x0040 (0x0040 - 0x0000)
struct BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge final
{
public:
	int32                                         技能ID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         输出技能ID;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge) == 0x000008, "Wrong alignment on BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge");
static_assert(sizeof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge) == 0x000040, "Wrong size on BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, 技能ID) == 0x000000, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::技能ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, 输出技能ID) == 0x000004, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::输出技能ID' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000009, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000010, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000020, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000021, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_BooleanOR_ReturnValue_1) == 0x000023, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000024, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000028, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000038, "Member 'BP_Input_Jinxi_C_判断是否要替换普通攻击_Rouge::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");

}

