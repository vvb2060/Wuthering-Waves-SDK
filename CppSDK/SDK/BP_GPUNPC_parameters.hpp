#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPUNPC

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GPUNPCInstanceItem_structs.hpp"


namespace SDK::Params
{

// Function BP_GPUNPC.BP_GPUNPC_C.ExecuteUbergraph_BP_GPUNPC
// 0x0004 (0x0004 - 0x0000)
struct BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC) == 0x000004, "Wrong alignment on BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC");
static_assert(sizeof(BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC) == 0x000004, "Wrong size on BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC");
static_assert(offsetof(BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC, EntryPoint) == 0x000000, "Member 'BP_GPUNPC_C_ExecuteUbergraph_BP_GPUNPC::EntryPoint' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.配置 Instance Groups
// 0x0090 (0x0090 - 0x0000)
struct BP_GPUNPC_C_配置_Instance_Groups final
{
public:
	int32                                         ___int_Array_Index_Variable;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBakedBoneMeshInstanceGroup*            CallFunc________Instance_Group_OutInstanceGroup;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGPUNPCInstanceItem                    CallFunc_Array_Get_Item;                           // 0x0020(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBakedBoneMeshInstanceGroup*            CallFunc________Instance_Group_OutInstanceGroup_1; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddInstanceData_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc____InstanceGroup____NumInstanceGroups;    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GPUNPC_C_配置_Instance_Groups) == 0x000010, "Wrong alignment on BP_GPUNPC_C_配置_Instance_Groups");
static_assert(sizeof(BP_GPUNPC_C_配置_Instance_Groups) == 0x000090, "Wrong size on BP_GPUNPC_C_配置_Instance_Groups");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, ___int_Array_Index_Variable) == 0x000000, "Member 'BP_GPUNPC_C_配置_Instance_Groups::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, ___int_Variable) == 0x000004, "Member 'BP_GPUNPC_C_配置_Instance_Groups::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc________Instance_Group_OutInstanceGroup) == 0x000008, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc________Instance_Group_OutInstanceGroup' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, ___int_Loop_Counter_Variable) == 0x000064, "Member 'BP_GPUNPC_C_配置_Instance_Groups::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc________Instance_Group_OutInstanceGroup_1) == 0x000068, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc________Instance_Group_OutInstanceGroup_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_AddInstanceData_ReturnValue) == 0x000070, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_AddInstanceData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc____InstanceGroup____NumInstanceGroups) == 0x00007C, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc____InstanceGroup____NumInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Subtract_IntInt_ReturnValue) == 0x000080, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_配置_Instance_Groups, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000085, "Member 'BP_GPUNPC_C_配置_Instance_Groups::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.通过索引获取 Instance Group
// 0x0030 (0x0030 - 0x0000)
struct BP_GPUNPC_C_通过索引获取_Instance_Group final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBakedBoneMeshInstanceGroup*            OutInstanceGroup;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumAnimTextures;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBakedBoneMeshInstanceGroup*>    CallFunc______InstanceGroup_OutInstanceGroups;     // 0x0018(0x0010)(ReferenceParm)
	class UBakedBoneMeshInstanceGroup*            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_通过索引获取_Instance_Group) == 0x000008, "Wrong alignment on BP_GPUNPC_C_通过索引获取_Instance_Group");
static_assert(sizeof(BP_GPUNPC_C_通过索引获取_Instance_Group) == 0x000030, "Wrong size on BP_GPUNPC_C_通过索引获取_Instance_Group");
static_assert(offsetof(BP_GPUNPC_C_通过索引获取_Instance_Group, Index_0) == 0x000000, "Member 'BP_GPUNPC_C_通过索引获取_Instance_Group::Index_0' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_通过索引获取_Instance_Group, OutInstanceGroup) == 0x000008, "Member 'BP_GPUNPC_C_通过索引获取_Instance_Group::OutInstanceGroup' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_通过索引获取_Instance_Group, NumAnimTextures) == 0x000010, "Member 'BP_GPUNPC_C_通过索引获取_Instance_Group::NumAnimTextures' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_通过索引获取_Instance_Group, CallFunc______InstanceGroup_OutInstanceGroups) == 0x000018, "Member 'BP_GPUNPC_C_通过索引获取_Instance_Group::CallFunc______InstanceGroup_OutInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_通过索引获取_Instance_Group, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_GPUNPC_C_通过索引获取_Instance_Group::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.生成Instance数据
// 0x000C (0x000C - 0x0000)
struct BP_GPUNPC_C_生成Instance数据 final
{
public:
	int32                                         Y;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InstanceIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_生成Instance数据) == 0x000004, "Wrong alignment on BP_GPUNPC_C_生成Instance数据");
static_assert(sizeof(BP_GPUNPC_C_生成Instance数据) == 0x00000C, "Wrong size on BP_GPUNPC_C_生成Instance数据");
static_assert(offsetof(BP_GPUNPC_C_生成Instance数据, Y) == 0x000000, "Member 'BP_GPUNPC_C_生成Instance数据::Y' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance数据, X) == 0x000004, "Member 'BP_GPUNPC_C_生成Instance数据::X' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance数据, InstanceIndex) == 0x000008, "Member 'BP_GPUNPC_C_生成Instance数据::InstanceIndex' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取随机 Instance Group
// 0x0010 (0x0010 - 0x0000)
struct BP_GPUNPC_C_获取随机_Instance_Group final
{
public:
	class UBakedBoneMeshComponent*                OutComponent;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc____InstanceGroup____NumInstanceGroups;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取随机_Instance_Group) == 0x000008, "Wrong alignment on BP_GPUNPC_C_获取随机_Instance_Group");
static_assert(sizeof(BP_GPUNPC_C_获取随机_Instance_Group) == 0x000010, "Wrong size on BP_GPUNPC_C_获取随机_Instance_Group");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group, OutComponent) == 0x000000, "Member 'BP_GPUNPC_C_获取随机_Instance_Group::OutComponent' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group, CallFunc____InstanceGroup____NumInstanceGroups) == 0x000008, "Member 'BP_GPUNPC_C_获取随机_Instance_Group::CallFunc____InstanceGroup____NumInstanceGroups' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.刷新 BakedBoneMesh 组件
// 0x0048 (0x0048 - 0x0000)
struct BP_GPUNPC_C_刷新_BakedBoneMesh_组件 final
{
public:
	struct FBoxSphereBounds                       TempBounds;                                        // 0x0000(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBakedBoneMeshComponent*                CallFunc____BakedBoneMesh____OutComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_CalcBoundsByAreaType_ReturnValue;         // 0x0028(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GPUNPC_C_刷新_BakedBoneMesh_组件) == 0x000008, "Wrong alignment on BP_GPUNPC_C_刷新_BakedBoneMesh_组件");
static_assert(sizeof(BP_GPUNPC_C_刷新_BakedBoneMesh_组件) == 0x000048, "Wrong size on BP_GPUNPC_C_刷新_BakedBoneMesh_组件");
static_assert(offsetof(BP_GPUNPC_C_刷新_BakedBoneMesh_组件, TempBounds) == 0x000000, "Member 'BP_GPUNPC_C_刷新_BakedBoneMesh_组件::TempBounds' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_刷新_BakedBoneMesh_组件, CallFunc____BakedBoneMesh____OutComp) == 0x000020, "Member 'BP_GPUNPC_C_刷新_BakedBoneMesh_组件::CallFunc____BakedBoneMesh____OutComp' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_刷新_BakedBoneMesh_组件, CallFunc_CalcBoundsByAreaType_ReturnValue) == 0x000028, "Member 'BP_GPUNPC_C_刷新_BakedBoneMesh_组件::CallFunc_CalcBoundsByAreaType_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.生成Instance变换数据
// 0x0020 (0x0020 - 0x0000)
struct BP_GPUNPC_C_生成Instance变换数据 final
{
public:
	int32                                         Y;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InstanceIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GenerateInstanceTransformsByAreaType_ReturnValue; // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_GPUNPC_C_生成Instance变换数据) == 0x000008, "Wrong alignment on BP_GPUNPC_C_生成Instance变换数据");
static_assert(sizeof(BP_GPUNPC_C_生成Instance变换数据) == 0x000020, "Wrong size on BP_GPUNPC_C_生成Instance变换数据");
static_assert(offsetof(BP_GPUNPC_C_生成Instance变换数据, Y) == 0x000000, "Member 'BP_GPUNPC_C_生成Instance变换数据::Y' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance变换数据, X) == 0x000004, "Member 'BP_GPUNPC_C_生成Instance变换数据::X' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance变换数据, InstanceIndex) == 0x000008, "Member 'BP_GPUNPC_C_生成Instance变换数据::InstanceIndex' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance变换数据, CallFunc_GenerateInstanceTransformsByAreaType_ReturnValue) == 0x000010, "Member 'BP_GPUNPC_C_生成Instance变换数据::CallFunc_GenerateInstanceTransformsByAreaType_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.生成Instance随机配置
// 0x0130 (0x0130 - 0x0000)
struct BP_GPUNPC_C_生成Instance随机配置 final
{
public:
	int32                                         CurrGroupIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InstanceCounts;                                    // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc___InstanceGroup__________Index;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc______Instance_Group___Index;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc___InstanceGroup__________Index_1;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGPUNPCInstanceItem                    K2Node_MakeStruct_GPUNPCInstanceItem;              // 0x0090(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGPUNPCInstanceItem                    K2Node_MakeStruct_GPUNPCInstanceItem_1;            // 0x00E0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_生成Instance随机配置) == 0x000010, "Wrong alignment on BP_GPUNPC_C_生成Instance随机配置");
static_assert(sizeof(BP_GPUNPC_C_生成Instance随机配置) == 0x000130, "Wrong size on BP_GPUNPC_C_生成Instance随机配置");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CurrGroupIndex) == 0x000000, "Member 'BP_GPUNPC_C_生成Instance随机配置::CurrGroupIndex' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, InstanceCounts) == 0x000008, "Member 'BP_GPUNPC_C_生成Instance随机配置::InstanceCounts' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, ___int_Loop_Counter_Variable) == 0x000018, "Member 'BP_GPUNPC_C_生成Instance随机配置::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, ___int_Array_Index_Variable) == 0x000020, "Member 'BP_GPUNPC_C_生成Instance随机配置::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, ___int_Variable) == 0x000024, "Member 'BP_GPUNPC_C_生成Instance随机配置::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc___InstanceGroup__________Index) == 0x000034, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc___InstanceGroup__________Index' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc______Instance_Group___Index) == 0x000038, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc______Instance_Group___Index' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc___InstanceGroup__________Index_1) == 0x00003C, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc___InstanceGroup__________Index_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, K2Node_MakeStruct_GPUNPCInstanceItem) == 0x000090, "Member 'BP_GPUNPC_C_生成Instance随机配置::K2Node_MakeStruct_GPUNPCInstanceItem' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Array_AddUnique_ReturnValue) == 0x0000D0, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, K2Node_MakeStruct_GPUNPCInstanceItem_1) == 0x0000E0, "Member 'BP_GPUNPC_C_生成Instance随机配置::K2Node_MakeStruct_GPUNPCInstanceItem_1' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_生成Instance随机配置, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000120, "Member 'BP_GPUNPC_C_生成Instance随机配置::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取 BakedBoneMesh 组件
// 0x0010 (0x0010 - 0x0000)
struct BP_GPUNPC_C_获取_BakedBoneMesh_组件 final
{
public:
	class UBakedBoneMeshComponent*                OutComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBakedBoneMeshComponent*                CallFunc_GetBakedBoneMeshComponent_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取_BakedBoneMesh_组件) == 0x000008, "Wrong alignment on BP_GPUNPC_C_获取_BakedBoneMesh_组件");
static_assert(sizeof(BP_GPUNPC_C_获取_BakedBoneMesh_组件) == 0x000010, "Wrong size on BP_GPUNPC_C_获取_BakedBoneMesh_组件");
static_assert(offsetof(BP_GPUNPC_C_获取_BakedBoneMesh_组件, OutComp) == 0x000000, "Member 'BP_GPUNPC_C_获取_BakedBoneMesh_组件::OutComp' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取_BakedBoneMesh_组件, CallFunc_GetBakedBoneMeshComponent_ReturnValue) == 0x000008, "Member 'BP_GPUNPC_C_获取_BakedBoneMesh_组件::CallFunc_GetBakedBoneMeshComponent_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取 InstanceGroup 个数
// 0x0020 (0x0020 - 0x0000)
struct BP_GPUNPC_C_获取_InstanceGroup_个数 final
{
public:
	int32                                         NumInstanceGroups;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBakedBoneMeshInstanceGroup*>    CallFunc______InstanceGroup_OutInstanceGroups;     // 0x0008(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取_InstanceGroup_个数) == 0x000008, "Wrong alignment on BP_GPUNPC_C_获取_InstanceGroup_个数");
static_assert(sizeof(BP_GPUNPC_C_获取_InstanceGroup_个数) == 0x000020, "Wrong size on BP_GPUNPC_C_获取_InstanceGroup_个数");
static_assert(offsetof(BP_GPUNPC_C_获取_InstanceGroup_个数, NumInstanceGroups) == 0x000000, "Member 'BP_GPUNPC_C_获取_InstanceGroup_个数::NumInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取_InstanceGroup_个数, CallFunc______InstanceGroup_OutInstanceGroups) == 0x000008, "Member 'BP_GPUNPC_C_获取_InstanceGroup_个数::CallFunc______InstanceGroup_OutInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取_InstanceGroup_个数, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_GPUNPC_C_获取_InstanceGroup_个数::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取所有 InstanceGroup
// 0x0018 (0x0018 - 0x0000)
struct BP_GPUNPC_C_获取所有_InstanceGroup final
{
public:
	TArray<class UBakedBoneMeshInstanceGroup*>    OutInstanceGroups;                                 // 0x0000(0x0010)(Parm, OutParm)
	class UBakedBoneMeshComponent*                CallFunc_GetBakedBoneMeshComponent_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取所有_InstanceGroup) == 0x000008, "Wrong alignment on BP_GPUNPC_C_获取所有_InstanceGroup");
static_assert(sizeof(BP_GPUNPC_C_获取所有_InstanceGroup) == 0x000018, "Wrong size on BP_GPUNPC_C_获取所有_InstanceGroup");
static_assert(offsetof(BP_GPUNPC_C_获取所有_InstanceGroup, OutInstanceGroups) == 0x000000, "Member 'BP_GPUNPC_C_获取所有_InstanceGroup::OutInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取所有_InstanceGroup, CallFunc_GetBakedBoneMeshComponent_ReturnValue) == 0x000010, "Member 'BP_GPUNPC_C_获取所有_InstanceGroup::CallFunc_GetBakedBoneMeshComponent_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.计算 InstanceGroups 个数
// 0x000C (0x000C - 0x0000)
struct BP_GPUNPC_C_计算_InstanceGroups_个数 final
{
public:
	int32                                         NumInstanceGroups;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumInstanceGroupsInNeed;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_计算_InstanceGroups_个数) == 0x000004, "Wrong alignment on BP_GPUNPC_C_计算_InstanceGroups_个数");
static_assert(sizeof(BP_GPUNPC_C_计算_InstanceGroups_个数) == 0x00000C, "Wrong size on BP_GPUNPC_C_计算_InstanceGroups_个数");
static_assert(offsetof(BP_GPUNPC_C_计算_InstanceGroups_个数, NumInstanceGroups) == 0x000000, "Member 'BP_GPUNPC_C_计算_InstanceGroups_个数::NumInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_计算_InstanceGroups_个数, NumInstanceGroupsInNeed) == 0x000004, "Member 'BP_GPUNPC_C_计算_InstanceGroups_个数::NumInstanceGroupsInNeed' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_计算_InstanceGroups_个数, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'BP_GPUNPC_C_计算_InstanceGroups_个数::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.重置 InstanceGroups
// 0x0010 (0x0010 - 0x0000)
struct BP_GPUNPC_C_重置_InstanceGroups final
{
public:
	int32                                         CallFunc____InstanceGroups____NumInstanceGroups;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBakedBoneMeshComponent*                CallFunc____BakedBoneMesh____OutComp;              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_重置_InstanceGroups) == 0x000008, "Wrong alignment on BP_GPUNPC_C_重置_InstanceGroups");
static_assert(sizeof(BP_GPUNPC_C_重置_InstanceGroups) == 0x000010, "Wrong size on BP_GPUNPC_C_重置_InstanceGroups");
static_assert(offsetof(BP_GPUNPC_C_重置_InstanceGroups, CallFunc____InstanceGroups____NumInstanceGroups) == 0x000000, "Member 'BP_GPUNPC_C_重置_InstanceGroups::CallFunc____InstanceGroups____NumInstanceGroups' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_重置_InstanceGroups, CallFunc____BakedBoneMesh____OutComp) == 0x000008, "Member 'BP_GPUNPC_C_重置_InstanceGroups::CallFunc____BakedBoneMesh____OutComp' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取随机 Instance Group索引
// 0x0010 (0x0010 - 0x0000)
struct BP_GPUNPC_C_获取随机_Instance_Group索引 final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取随机_Instance_Group索引) == 0x000004, "Wrong alignment on BP_GPUNPC_C_获取随机_Instance_Group索引");
static_assert(sizeof(BP_GPUNPC_C_获取随机_Instance_Group索引) == 0x000010, "Wrong size on BP_GPUNPC_C_获取随机_Instance_Group索引");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group索引, Index_0) == 0x000000, "Member 'BP_GPUNPC_C_获取随机_Instance_Group索引::Index_0' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group索引, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_GPUNPC_C_获取随机_Instance_Group索引::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group索引, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_GPUNPC_C_获取随机_Instance_Group索引::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取随机_Instance_Group索引, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00000C, "Member 'BP_GPUNPC_C_获取随机_Instance_Group索引::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function BP_GPUNPC.BP_GPUNPC_C.获取InstanceGroup的随机动画贴图索引
// 0x0018 (0x0018 - 0x0000)
struct BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引 final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumAnimTextures_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引) == 0x000004, "Wrong alignment on BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引");
static_assert(sizeof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引) == 0x000018, "Wrong size on BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, GroupIndex) == 0x000000, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::GroupIndex' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, Index_0) == 0x000004, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::Index_0' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000008, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, CallFunc_GetNumAnimTextures_ReturnValue) == 0x00000C, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::CallFunc_GetNumAnimTextures_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000014, "Member 'BP_GPUNPC_C_获取InstanceGroup的随机动画贴图索引::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

}

