#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VortexCloud

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_VortexCloud.BP_VortexCloud_C.Is PC Or Android
// 0x0002 (0x0002 - 0x0000)
struct BP_VortexCloud_C_Is_PC_Or_Android final
{
public:
	EKuroFeatureLevel                             CallFunc_GetWorldFeatureLevel_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VortexCloud_C_Is_PC_Or_Android) == 0x000001, "Wrong alignment on BP_VortexCloud_C_Is_PC_Or_Android");
static_assert(sizeof(BP_VortexCloud_C_Is_PC_Or_Android) == 0x000002, "Wrong size on BP_VortexCloud_C_Is_PC_Or_Android");
static_assert(offsetof(BP_VortexCloud_C_Is_PC_Or_Android, CallFunc_GetWorldFeatureLevel_ReturnValue) == 0x000000, "Member 'BP_VortexCloud_C_Is_PC_Or_Android::CallFunc_GetWorldFeatureLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Is_PC_Or_Android, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_VortexCloud_C_Is_PC_Or_Android::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_VortexCloud.BP_VortexCloud_C.Set VortexParameters
// 0x0028 (0x0028 - 0x0000)
struct BP_VortexCloud_C_Set_VortexParameters final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VortexCloud_C_Set_VortexParameters) == 0x000008, "Wrong alignment on BP_VortexCloud_C_Set_VortexParameters");
static_assert(sizeof(BP_VortexCloud_C_Set_VortexParameters) == 0x000028, "Wrong size on BP_VortexCloud_C_Set_VortexParameters");
static_assert(offsetof(BP_VortexCloud_C_Set_VortexParameters, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_VortexCloud_C_Set_VortexParameters::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_VortexParameters, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000008, "Member 'BP_VortexCloud_C_Set_VortexParameters::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_VortexParameters, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'BP_VortexCloud_C_Set_VortexParameters::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_VortexParameters, CallFunc_MakeVector_ReturnValue_1) == 0x00001C, "Member 'BP_VortexCloud_C_Set_VortexParameters::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_VortexCloud.BP_VortexCloud_C.Set Current Post Process Weight
// 0x0020 (0x0020 - 0x0000)
struct BP_VortexCloud_C_Set_Current_Post_Process_Weight final
{
public:
	class AActor*                                 CallFunc_GetGlobalGIActor_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GlobalGI_C*                         K2Node_DynamicCast_AsBP_Global_GI;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPostProcessVolumeWeight_ReturnValue;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VortexCloud_C_Set_Current_Post_Process_Weight) == 0x000008, "Wrong alignment on BP_VortexCloud_C_Set_Current_Post_Process_Weight");
static_assert(sizeof(BP_VortexCloud_C_Set_Current_Post_Process_Weight) == 0x000020, "Wrong size on BP_VortexCloud_C_Set_Current_Post_Process_Weight");
static_assert(offsetof(BP_VortexCloud_C_Set_Current_Post_Process_Weight, CallFunc_GetGlobalGIActor_ReturnValue) == 0x000000, "Member 'BP_VortexCloud_C_Set_Current_Post_Process_Weight::CallFunc_GetGlobalGIActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_Current_Post_Process_Weight, K2Node_DynamicCast_AsBP_Global_GI) == 0x000008, "Member 'BP_VortexCloud_C_Set_Current_Post_Process_Weight::K2Node_DynamicCast_AsBP_Global_GI' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_Current_Post_Process_Weight, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_VortexCloud_C_Set_Current_Post_Process_Weight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_Current_Post_Process_Weight, CallFunc_GetPostProcessVolumeWeight_ReturnValue) == 0x000014, "Member 'BP_VortexCloud_C_Set_Current_Post_Process_Weight::CallFunc_GetPostProcessVolumeWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_Set_Current_Post_Process_Weight, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_VortexCloud_C_Set_Current_Post_Process_Weight::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_VortexCloud.BP_VortexCloud_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VortexCloud_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VortexCloud_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_VortexCloud_C_ReceiveTick");
static_assert(sizeof(BP_VortexCloud_C_ReceiveTick) == 0x000004, "Wrong size on BP_VortexCloud_C_ReceiveTick");
static_assert(offsetof(BP_VortexCloud_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_VortexCloud_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_VortexCloud.BP_VortexCloud_C.EditorTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VortexCloud_C_EditorTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VortexCloud_C_EditorTick) == 0x000004, "Wrong alignment on BP_VortexCloud_C_EditorTick");
static_assert(sizeof(BP_VortexCloud_C_EditorTick) == 0x000004, "Wrong size on BP_VortexCloud_C_EditorTick");
static_assert(offsetof(BP_VortexCloud_C_EditorTick, DeltaSeconds) == 0x000000, "Member 'BP_VortexCloud_C_EditorTick::DeltaSeconds' has a wrong offset!");

// Function BP_VortexCloud.BP_VortexCloud_C.ExecuteUbergraph_BP_VortexCloud
// 0x000C (0x000C - 0x0000)
struct BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds_1;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud) == 0x000004, "Wrong alignment on BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud");
static_assert(sizeof(BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud) == 0x00000C, "Wrong size on BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud");
static_assert(offsetof(BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud, EntryPoint) == 0x000000, "Member 'BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud, K2Node_Event_DeltaSeconds_1) == 0x000004, "Member 'BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud::K2Node_Event_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_VortexCloud_C_ExecuteUbergraph_BP_VortexCloud::K2Node_Event_DeltaSeconds' has a wrong offset!");

}

