#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LeavesInteraction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LeavesInteraction.BP_LeavesInteraction_C
// 0x00F0 (0x03A0 - 0x02B0)
class ABP_LeavesInteraction_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          AreaBox;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_FX_LeavesInteraction;                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FieldSize;                                         // 0x02D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Resolution;                                        // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x02E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Weapon;                                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastWeaponPosition;                                // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponPosition;                                    // 0x0304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponVelocity;                                    // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           Global_MPC;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isClear;                                           // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GlobalWorldPosition;                               // 0x032C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerSpeed;                                       // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponSpeed;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DepthCapturePosition;                              // 0x0344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               DepthTexture;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeavesIDStart;                                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeavesIDEnd;                                       // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeavesNum;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoxSize;                                           // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeavesScale;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LUTIndex;                                          // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeavesRoughness;                                   // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeavesAO;                                          // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LutProbabilityPower;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               LeavesMaskTexture;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLUT;                                            // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetDis;                                         // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BPPos;                                             // 0x0390(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LeavesInteraction(int32 EntryPoint);
	void OnWeaponInteraction(const struct FVectorDouble& OriginPoint, class UBP_SceneBattleInteract_C* Config, int32 Id);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void InitParam();
	void UpdateParam(float dt);
	void WeaponData();
	void Choose_Available_Point(const struct FVectorDouble& CollisionPoint, const struct FVectorDouble& WeaponPoint, class UBP_SceneBattleInteract_C* ConfigDA, struct FVectorDouble* AvailblePoint);
	void Debug();
	void SetLeavesParameters();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LeavesInteraction_C">();
	}
	static class ABP_LeavesInteraction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LeavesInteraction_C>();
	}
};
static_assert(alignof(ABP_LeavesInteraction_C) == 0x000008, "Wrong alignment on ABP_LeavesInteraction_C");
static_assert(sizeof(ABP_LeavesInteraction_C) == 0x0003A0, "Wrong size on ABP_LeavesInteraction_C");
static_assert(offsetof(ABP_LeavesInteraction_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_LeavesInteraction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, AreaBox) == 0x0002B8, "Member 'ABP_LeavesInteraction_C::AreaBox' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, NS_FX_LeavesInteraction) == 0x0002C0, "Member 'ABP_LeavesInteraction_C::NS_FX_LeavesInteraction' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_LeavesInteraction_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, FieldSize) == 0x0002D0, "Member 'ABP_LeavesInteraction_C::FieldSize' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, Resolution) == 0x0002DC, "Member 'ABP_LeavesInteraction_C::Resolution' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, Offset) == 0x0002E0, "Member 'ABP_LeavesInteraction_C::Offset' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, Weapon) == 0x0002F0, "Member 'ABP_LeavesInteraction_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LastWeaponPosition) == 0x0002F8, "Member 'ABP_LeavesInteraction_C::LastWeaponPosition' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, WeaponPosition) == 0x000304, "Member 'ABP_LeavesInteraction_C::WeaponPosition' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, WeaponVelocity) == 0x000310, "Member 'ABP_LeavesInteraction_C::WeaponVelocity' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, Global_MPC) == 0x000320, "Member 'ABP_LeavesInteraction_C::Global_MPC' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, isClear) == 0x000328, "Member 'ABP_LeavesInteraction_C::isClear' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, GlobalWorldPosition) == 0x00032C, "Member 'ABP_LeavesInteraction_C::GlobalWorldPosition' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, PlayerSpeed) == 0x00033C, "Member 'ABP_LeavesInteraction_C::PlayerSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, WeaponSpeed) == 0x000340, "Member 'ABP_LeavesInteraction_C::WeaponSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, DepthCapturePosition) == 0x000344, "Member 'ABP_LeavesInteraction_C::DepthCapturePosition' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, DepthTexture) == 0x000350, "Member 'ABP_LeavesInteraction_C::DepthTexture' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesIDStart) == 0x000358, "Member 'ABP_LeavesInteraction_C::LeavesIDStart' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesIDEnd) == 0x00035C, "Member 'ABP_LeavesInteraction_C::LeavesIDEnd' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesNum) == 0x000360, "Member 'ABP_LeavesInteraction_C::LeavesNum' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, BoxSize) == 0x000364, "Member 'ABP_LeavesInteraction_C::BoxSize' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesScale) == 0x000368, "Member 'ABP_LeavesInteraction_C::LeavesScale' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LUTIndex) == 0x00036C, "Member 'ABP_LeavesInteraction_C::LUTIndex' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesRoughness) == 0x000370, "Member 'ABP_LeavesInteraction_C::LeavesRoughness' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesAO) == 0x000374, "Member 'ABP_LeavesInteraction_C::LeavesAO' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LutProbabilityPower) == 0x000378, "Member 'ABP_LeavesInteraction_C::LutProbabilityPower' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, LeavesMaskTexture) == 0x000380, "Member 'ABP_LeavesInteraction_C::LeavesMaskTexture' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, UseLUT) == 0x000388, "Member 'ABP_LeavesInteraction_C::UseLUT' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, OffsetDis) == 0x00038C, "Member 'ABP_LeavesInteraction_C::OffsetDis' has a wrong offset!");
static_assert(offsetof(ABP_LeavesInteraction_C, BPPos) == 0x000390, "Member 'ABP_LeavesInteraction_C::BPPos' has a wrong offset!");

}

