#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStateControllerShake

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStateControllerShake.TsAnimNotifyStateControllerShake_C
// 0x0018 (0x0060 - 0x0048)
class UTsAnimNotifyStateControllerShake_C final : public UKuroAnimNotifyState
{
public:
	class UKuroForceFeedbackEffect*               Effect;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsLooping;                                         // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IsIgnoreTimeDilation;                              // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IsPlayWhilePaused;                                 // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

public:
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStateControllerShake_C">();
	}
	static class UTsAnimNotifyStateControllerShake_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStateControllerShake_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStateControllerShake_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStateControllerShake_C");
static_assert(sizeof(UTsAnimNotifyStateControllerShake_C) == 0x000060, "Wrong size on UTsAnimNotifyStateControllerShake_C");
static_assert(offsetof(UTsAnimNotifyStateControllerShake_C, Effect) == 0x000048, "Member 'UTsAnimNotifyStateControllerShake_C::Effect' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateControllerShake_C, Name_0) == 0x000050, "Member 'UTsAnimNotifyStateControllerShake_C::Name_0' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateControllerShake_C, IsLooping) == 0x00005C, "Member 'UTsAnimNotifyStateControllerShake_C::IsLooping' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateControllerShake_C, IsIgnoreTimeDilation) == 0x00005D, "Member 'UTsAnimNotifyStateControllerShake_C::IsIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateControllerShake_C, IsPlayWhilePaused) == 0x00005E, "Member 'UTsAnimNotifyStateControllerShake_C::IsPlayWhilePaused' has a wrong offset!");

}

