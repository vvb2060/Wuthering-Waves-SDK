#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlantGrowthController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlantGrowthController.BP_PlantGrowthController_C
// 0x0058 (0x0318 - 0x02C0)
class ABP_PlantGrowthController_C final : public AKuroEditorTickActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          AreaBox;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EditorCharacterPosition;                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Delay;                                             // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceLimit;                                  // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AreaExtent;                                        // 0x02E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RuntimePreview;                                    // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CharacterLocation;                                 // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBySeq;                                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void EditorTick(float DeltaSeconds);
	void ReceiveDestroyed();
	void ExecuteUbergraph_BP_PlantGrowthController(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlantGrowthController_C">();
	}
	static class ABP_PlantGrowthController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlantGrowthController_C>();
	}
};
static_assert(alignof(ABP_PlantGrowthController_C) == 0x000008, "Wrong alignment on ABP_PlantGrowthController_C");
static_assert(sizeof(ABP_PlantGrowthController_C) == 0x000318, "Wrong size on ABP_PlantGrowthController_C");
static_assert(offsetof(ABP_PlantGrowthController_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_PlantGrowthController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, AreaBox) == 0x0002C8, "Member 'ABP_PlantGrowthController_C::AreaBox' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, EditorCharacterPosition) == 0x0002D0, "Member 'ABP_PlantGrowthController_C::EditorCharacterPosition' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_PlantGrowthController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, Delay) == 0x0002E0, "Member 'ABP_PlantGrowthController_C::Delay' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, MaxDistanceLimit) == 0x0002E4, "Member 'ABP_PlantGrowthController_C::MaxDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, AreaExtent) == 0x0002E8, "Member 'ABP_PlantGrowthController_C::AreaExtent' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, RuntimePreview) == 0x0002F4, "Member 'ABP_PlantGrowthController_C::RuntimePreview' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, CharacterLocation) == 0x0002F8, "Member 'ABP_PlantGrowthController_C::CharacterLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, Runtime) == 0x000310, "Member 'ABP_PlantGrowthController_C::Runtime' has a wrong offset!");
static_assert(offsetof(ABP_PlantGrowthController_C, TimeBySeq) == 0x000314, "Member 'ABP_PlantGrowthController_C::TimeBySeq' has a wrong offset!");

}

