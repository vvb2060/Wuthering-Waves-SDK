#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPUNPC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GPUNPCInstanceItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPUNPC.BP_GPUNPC_C
// 0x0038 (0x0300 - 0x02C8)
class ABP_GPUNPC_C final : public ABakedBoneMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBakedBoneMeshComponent*                BakedBoneMeshComp;                                 // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UGPUNPCData_C*>                  GPUNPC_DA数据;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGPUNPCInstanceItem>            Instance_Items;                                    // 0x02E8(0x0010)(Edit, BlueprintVisible)
	bool                                          HideLogicallyOnBeginPlay;                          // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          按DA顺序生成;                                      // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GPUNPC(int32 EntryPoint);
	void ReceiveBeginPlay();
	void 生成_GPU_NPC();
	void 配置_Instance_Groups();
	void 通过索引获取_Instance_Group(int32 Index_0, class UBakedBoneMeshInstanceGroup** OutInstanceGroup);
	void 生成Instance数据();
	void 获取随机_Instance_Group(class UBakedBoneMeshComponent** OutComponent);
	void 刷新_BakedBoneMesh_组件();
	void 生成Instance变换数据();
	void 生成Instance随机配置();
	void 获取_BakedBoneMesh_组件(class UBakedBoneMeshComponent** OutComp);
	void 获取_InstanceGroup_个数(int32* NumInstanceGroups);
	void 获取所有_InstanceGroup(TArray<class UBakedBoneMeshInstanceGroup*>* OutInstanceGroups);
	void 计算_InstanceGroups_个数(int32* NumInstanceGroups);
	void 重置_InstanceGroups();
	void 生成贴图合并配置();
	void 迁移_Instance配置到_Editor_Only();
	void 获取随机_Instance_Group索引(int32* Index_0);
	void 获取InstanceGroup的随机动画贴图索引(int32 GroupIndex, int32* Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPUNPC_C">();
	}
	static class ABP_GPUNPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPUNPC_C>();
	}
};
static_assert(alignof(ABP_GPUNPC_C) == 0x000008, "Wrong alignment on ABP_GPUNPC_C");
static_assert(sizeof(ABP_GPUNPC_C) == 0x000300, "Wrong size on ABP_GPUNPC_C");
static_assert(offsetof(ABP_GPUNPC_C, UberGraphFrame) == 0x0002C8, "Member 'ABP_GPUNPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GPUNPC_C, BakedBoneMeshComp) == 0x0002D0, "Member 'ABP_GPUNPC_C::BakedBoneMeshComp' has a wrong offset!");
static_assert(offsetof(ABP_GPUNPC_C, GPUNPC_DA数据) == 0x0002D8, "Member 'ABP_GPUNPC_C::GPUNPC_DA数据' has a wrong offset!");
static_assert(offsetof(ABP_GPUNPC_C, Instance_Items) == 0x0002E8, "Member 'ABP_GPUNPC_C::Instance_Items' has a wrong offset!");
static_assert(offsetof(ABP_GPUNPC_C, HideLogicallyOnBeginPlay) == 0x0002F8, "Member 'ABP_GPUNPC_C::HideLogicallyOnBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_GPUNPC_C, 按DA顺序生成) == 0x0002F9, "Member 'ABP_GPUNPC_C::按DA顺序生成' has a wrong offset!");

}

