#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroCmdVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroCmdVolume.BP_KuroCmdVolume_C
// 0x00B0 (0x0370 - 0x02C0)
class ABP_KuroCmdVolume_C final : public AKuroEditorTickActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x02D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WorldLocation;                                     // 0x0300(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Box_Extent;                                        // 0x030C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         InBoxCmd;                                          // 0x0318(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         OutBoxCmd;                                         // 0x0328(0x0010)(Edit, BlueprintVisible)
	bool                                          LastState;                                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Editor;                                            // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPC;                                               // 0x033A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33B[0x5];                                      // 0x033B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InBoxCmdMobile;                                    // 0x0340(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         OutBoxCmdMobile;                                   // 0x0350(0x0010)(Edit, BlueprintVisible)
	bool                                          bValid;                                            // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInBox;                                            // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocation;                                    // 0x0364(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetCamearPosition();
	bool HasValidCmd();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void EditorTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_BP_KuroCmdVolume(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroCmdVolume_C">();
	}
	static class ABP_KuroCmdVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroCmdVolume_C>();
	}
};
static_assert(alignof(ABP_KuroCmdVolume_C) == 0x000010, "Wrong alignment on ABP_KuroCmdVolume_C");
static_assert(sizeof(ABP_KuroCmdVolume_C) == 0x000370, "Wrong size on ABP_KuroCmdVolume_C");
static_assert(offsetof(ABP_KuroCmdVolume_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_KuroCmdVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, Box) == 0x0002C8, "Member 'ABP_KuroCmdVolume_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, Transform) == 0x0002D0, "Member 'ABP_KuroCmdVolume_C::Transform' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, WorldLocation) == 0x000300, "Member 'ABP_KuroCmdVolume_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, Box_Extent) == 0x00030C, "Member 'ABP_KuroCmdVolume_C::Box_Extent' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, InBoxCmd) == 0x000318, "Member 'ABP_KuroCmdVolume_C::InBoxCmd' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, OutBoxCmd) == 0x000328, "Member 'ABP_KuroCmdVolume_C::OutBoxCmd' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, LastState) == 0x000338, "Member 'ABP_KuroCmdVolume_C::LastState' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, Editor) == 0x000339, "Member 'ABP_KuroCmdVolume_C::Editor' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, bPC) == 0x00033A, "Member 'ABP_KuroCmdVolume_C::bPC' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, InBoxCmdMobile) == 0x000340, "Member 'ABP_KuroCmdVolume_C::InBoxCmdMobile' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, OutBoxCmdMobile) == 0x000350, "Member 'ABP_KuroCmdVolume_C::OutBoxCmdMobile' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, bValid) == 0x000360, "Member 'ABP_KuroCmdVolume_C::bValid' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, bInBox) == 0x000361, "Member 'ABP_KuroCmdVolume_C::bInBox' has a wrong offset!");
static_assert(offsetof(ABP_KuroCmdVolume_C, CameraLocation) == 0x000364, "Member 'ABP_KuroCmdVolume_C::CameraLocation' has a wrong offset!");

}

