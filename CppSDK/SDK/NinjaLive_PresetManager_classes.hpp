#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLive_PresetManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLive_PresetManager.NinjaLive_PresetManager_C
// 0x01F0 (0x04A0 - 0x02B0)
class ANinjaLive_PresetManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   WriteDataTableUtility;                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            EditorIcon;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   AssetTrimmedName_Global;                           // 0x02D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AssetPath_Global;                                  // 0x02DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNinjaLiveGUI_C*                        BP_Widget_GUI1_Var;                                // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DefaultActor;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultLiveActorIndex;                             // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ArrayOfLevelActors;                                // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FString                                 NinjaLiveAssetTrimmedName;                         // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   NinjaLivePath;                                     // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNamedSlot*>                     ArrayOfLevelActorNamedSlots;                       // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         RT_counter;                                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RT_RenderPathDynamic;                              // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RT_RenderPathStatic;                               // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          GUIWidgetInitDone;                                 // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNamedSlot*>                     NamedSlots;                                        // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UDataTable*                             LoadedDataTable;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LoadedDataTablePath;                               // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         TextureCompression;                                // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PNGExportGamma;                                    // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveTexturesWithsRGB;                              // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityMapDownscaleFactor;                        // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CompensateUEGammaCorrection;                       // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DensityMapTextureCompressionIndex;                 // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VelocityMapTextureCompressionIndex;                // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomTickRate;                                    // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsePluginForFGAExport;                             // 0x03B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisablePresetManager;                              // 0x03B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B7[0x1];                                      // 0x03B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefaultLiveStageActor;                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightSelectedActors;                           // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InternalSavePath;                                  // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ExternalSavePath;                                  // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DefaultPreset;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NinjaRootFolder;                                   // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DefaultLiveActor;                                  // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FirstStart;                                        // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAssetData>                     AvailableImagesData;                               // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           AvailableImagesNames;                              // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAssetData>                     AvailableParticlesData;                            // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           AvailableParticleNames;                            // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ArraysConstructed;                                 // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PMInitFinished;                                    // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugPerformance;                                  // 0x0462(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          PoolManagerDetected;                               // 0x0463(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoConnectToMemoryPool_IF_Found;                  // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PresetManagerDebugPrint;                           // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SaveDebugTextToDefaultLog;                         // 0x0466(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_467[0x1];                                      // 0x0467(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugTextLifetime;                                 // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 HighlightColor;                                    // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         HighlightThickness;                                // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         HighlightDuration;                                 // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighlightRefreshRate;                              // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          ShowMouseCursor;                                   // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               RenderBufferSaver;                                 // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         PresetSavingBugWorkaroundUEversions;               // 0x0488(0x0010)(Edit, BlueprintVisible)
	bool                                          DisableGUIWarningOnPresetSaving;                   // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void MarkForSave_UE426_BugWorkaround(class UObject* CurrentAsset);
	void ConvertToPowerOfTwo(int32 In, int32* Out);
	void GetCurrentLevelInfo(class FName* LevelName, class FName* LevelPath);
	void MarkNewFilesAsUnsaved(TArray<struct FAssetData>& ArrayOfUnsaveAssetData);
	void DataTable_SingleKeyPicker_DT(class UDataTable* DataTableIn, const class FString& KeyToPick, class FString* PickedKeyValue, bool* NotFound);
	void Preset_SingleKeyPicker_DT(const class FString& PresetName, const class FString& KeyToPick, class UDataTable** DataTable, class FString* PickedKeyValue);
	void AssetDataFromObject(class UObject* InputObject, struct FAssetData* ComboAssetData, class FName* Object_Path, class FName* Package_Name, class FName* Package_Path, class FName* Asset_Name, class FName* Asset_Class);
	void Preset_to_InternalCSV_to_DT_Saver(bool OverWriteFlag, const class FString& VarAsString, const class FString& SelectedItem, TArray<class FName>& AssetPaths, class FName AssetName);
	void RenderTargetExportSingle(class UTextureRenderTarget2D* TextureRenderTarget, bool InternalSave, bool sRGB, bool NoAlpha, bool SaveWithDialog, class FName InternalFilePath, class FName ExternalFilePath, const class FString& FileName, const class FString& Extension, class FName* SavedAssetPath, struct FAssetData* SavedAssetData);
	void SetAssetNameAndPath(const class UObject* Object, class FName* AssetTrimmedName, class FName* AssetPath);
	void UserConstructionScript();
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void WriteDataTableFunction(class UDataTable* InputTable, const class FString& InputData);
	void OnDensityMapSave(bool SavePaintBuffer);
	void ExecuteUbergraph_NinjaLive_PresetManager(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLive_PresetManager_C">();
	}
	static class ANinjaLive_PresetManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANinjaLive_PresetManager_C>();
	}
};
static_assert(alignof(ANinjaLive_PresetManager_C) == 0x000008, "Wrong alignment on ANinjaLive_PresetManager_C");
static_assert(sizeof(ANinjaLive_PresetManager_C) == 0x0004A0, "Wrong size on ANinjaLive_PresetManager_C");
static_assert(offsetof(ANinjaLive_PresetManager_C, UberGraphFrame) == 0x0002B0, "Member 'ANinjaLive_PresetManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, WriteDataTableUtility) == 0x0002B8, "Member 'ANinjaLive_PresetManager_C::WriteDataTableUtility' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, Root) == 0x0002C0, "Member 'ANinjaLive_PresetManager_C::Root' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, EditorIcon) == 0x0002C8, "Member 'ANinjaLive_PresetManager_C::EditorIcon' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AssetTrimmedName_Global) == 0x0002D0, "Member 'ANinjaLive_PresetManager_C::AssetTrimmedName_Global' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AssetPath_Global) == 0x0002DC, "Member 'ANinjaLive_PresetManager_C::AssetPath_Global' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, BP_Widget_GUI1_Var) == 0x0002E8, "Member 'ANinjaLive_PresetManager_C::BP_Widget_GUI1_Var' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DefaultActor) == 0x0002F0, "Member 'ANinjaLive_PresetManager_C::DefaultActor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DefaultLiveActorIndex) == 0x0002F8, "Member 'ANinjaLive_PresetManager_C::DefaultLiveActorIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, ArrayOfLevelActors) == 0x000300, "Member 'ANinjaLive_PresetManager_C::ArrayOfLevelActors' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, NinjaLiveAssetTrimmedName) == 0x000310, "Member 'ANinjaLive_PresetManager_C::NinjaLiveAssetTrimmedName' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, NinjaLivePath) == 0x000320, "Member 'ANinjaLive_PresetManager_C::NinjaLivePath' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, ArrayOfLevelActorNamedSlots) == 0x000330, "Member 'ANinjaLive_PresetManager_C::ArrayOfLevelActorNamedSlots' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, RT_counter) == 0x000340, "Member 'ANinjaLive_PresetManager_C::RT_counter' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, RT_RenderPathDynamic) == 0x000348, "Member 'ANinjaLive_PresetManager_C::RT_RenderPathDynamic' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, RT_RenderPathStatic) == 0x000358, "Member 'ANinjaLive_PresetManager_C::RT_RenderPathStatic' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, GUIWidgetInitDone) == 0x000368, "Member 'ANinjaLive_PresetManager_C::GUIWidgetInitDone' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, NamedSlots) == 0x000370, "Member 'ANinjaLive_PresetManager_C::NamedSlots' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, LoadedDataTable) == 0x000380, "Member 'ANinjaLive_PresetManager_C::LoadedDataTable' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, LoadedDataTablePath) == 0x000388, "Member 'ANinjaLive_PresetManager_C::LoadedDataTablePath' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, TextureCompression) == 0x000398, "Member 'ANinjaLive_PresetManager_C::TextureCompression' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, PNGExportGamma) == 0x00039C, "Member 'ANinjaLive_PresetManager_C::PNGExportGamma' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, SaveTexturesWithsRGB) == 0x0003A0, "Member 'ANinjaLive_PresetManager_C::SaveTexturesWithsRGB' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, VelocityMapDownscaleFactor) == 0x0003A4, "Member 'ANinjaLive_PresetManager_C::VelocityMapDownscaleFactor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, CompensateUEGammaCorrection) == 0x0003A8, "Member 'ANinjaLive_PresetManager_C::CompensateUEGammaCorrection' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DensityMapTextureCompressionIndex) == 0x0003AC, "Member 'ANinjaLive_PresetManager_C::DensityMapTextureCompressionIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, VelocityMapTextureCompressionIndex) == 0x0003B0, "Member 'ANinjaLive_PresetManager_C::VelocityMapTextureCompressionIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, CustomTickRate) == 0x0003B4, "Member 'ANinjaLive_PresetManager_C::CustomTickRate' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, UsePluginForFGAExport) == 0x0003B5, "Member 'ANinjaLive_PresetManager_C::UsePluginForFGAExport' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DisablePresetManager) == 0x0003B6, "Member 'ANinjaLive_PresetManager_C::DisablePresetManager' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DefaultLiveStageActor) == 0x0003B8, "Member 'ANinjaLive_PresetManager_C::DefaultLiveStageActor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, HighlightSelectedActors) == 0x0003C0, "Member 'ANinjaLive_PresetManager_C::HighlightSelectedActors' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, InternalSavePath) == 0x0003C8, "Member 'ANinjaLive_PresetManager_C::InternalSavePath' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, ExternalSavePath) == 0x0003D8, "Member 'ANinjaLive_PresetManager_C::ExternalSavePath' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DefaultPreset) == 0x0003E8, "Member 'ANinjaLive_PresetManager_C::DefaultPreset' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, NinjaRootFolder) == 0x0003F8, "Member 'ANinjaLive_PresetManager_C::NinjaRootFolder' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DefaultLiveActor) == 0x000408, "Member 'ANinjaLive_PresetManager_C::DefaultLiveActor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, FirstStart) == 0x000418, "Member 'ANinjaLive_PresetManager_C::FirstStart' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AvailableImagesData) == 0x000420, "Member 'ANinjaLive_PresetManager_C::AvailableImagesData' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AvailableImagesNames) == 0x000430, "Member 'ANinjaLive_PresetManager_C::AvailableImagesNames' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AvailableParticlesData) == 0x000440, "Member 'ANinjaLive_PresetManager_C::AvailableParticlesData' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AvailableParticleNames) == 0x000450, "Member 'ANinjaLive_PresetManager_C::AvailableParticleNames' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, ArraysConstructed) == 0x000460, "Member 'ANinjaLive_PresetManager_C::ArraysConstructed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, PMInitFinished) == 0x000461, "Member 'ANinjaLive_PresetManager_C::PMInitFinished' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DebugPerformance) == 0x000462, "Member 'ANinjaLive_PresetManager_C::DebugPerformance' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, PoolManagerDetected) == 0x000463, "Member 'ANinjaLive_PresetManager_C::PoolManagerDetected' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, AutoConnectToMemoryPool_IF_Found) == 0x000464, "Member 'ANinjaLive_PresetManager_C::AutoConnectToMemoryPool_IF_Found' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, PresetManagerDebugPrint) == 0x000465, "Member 'ANinjaLive_PresetManager_C::PresetManagerDebugPrint' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, SaveDebugTextToDefaultLog) == 0x000466, "Member 'ANinjaLive_PresetManager_C::SaveDebugTextToDefaultLog' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DebugTextLifetime) == 0x000468, "Member 'ANinjaLive_PresetManager_C::DebugTextLifetime' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, HighlightColor) == 0x00046C, "Member 'ANinjaLive_PresetManager_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, HighlightThickness) == 0x000470, "Member 'ANinjaLive_PresetManager_C::HighlightThickness' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, HighlightDuration) == 0x000474, "Member 'ANinjaLive_PresetManager_C::HighlightDuration' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, HighlightRefreshRate) == 0x000478, "Member 'ANinjaLive_PresetManager_C::HighlightRefreshRate' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, ShowMouseCursor) == 0x00047C, "Member 'ANinjaLive_PresetManager_C::ShowMouseCursor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, RenderBufferSaver) == 0x000480, "Member 'ANinjaLive_PresetManager_C::RenderBufferSaver' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, PresetSavingBugWorkaroundUEversions) == 0x000488, "Member 'ANinjaLive_PresetManager_C::PresetSavingBugWorkaroundUEversions' has a wrong offset!");
static_assert(offsetof(ANinjaLive_PresetManager_C, DisableGUIWarningOnPresetSaving) == 0x000498, "Member 'ANinjaLive_PresetManager_C::DisableGUIWarningOnPresetSaving' has a wrong offset!");

}

