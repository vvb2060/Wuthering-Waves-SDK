#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightModel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightModel.BP_LightModel_C
// 0x0040 (0x02F0 - 0x02B0)
class ABP_LightModel_C final : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            LightModel;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           EmissionDayColor;                                  // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EmissionColor;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWholeDayEmission;                               // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseMaterial_LOD;                                   // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightModel_C">();
	}
	static class ABP_LightModel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightModel_C>();
	}
};
static_assert(alignof(ABP_LightModel_C) == 0x000008, "Wrong alignment on ABP_LightModel_C");
static_assert(sizeof(ABP_LightModel_C) == 0x0002F0, "Wrong size on ABP_LightModel_C");
static_assert(offsetof(ABP_LightModel_C, StaticMesh) == 0x0002B0, "Member 'ABP_LightModel_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_LightModel_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, LightModel) == 0x0002C0, "Member 'ABP_LightModel_C::LightModel' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, EmissionDayColor) == 0x0002C8, "Member 'ABP_LightModel_C::EmissionDayColor' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, EmissionColor) == 0x0002D8, "Member 'ABP_LightModel_C::EmissionColor' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, UseWholeDayEmission) == 0x0002E8, "Member 'ABP_LightModel_C::UseWholeDayEmission' has a wrong offset!");
static_assert(offsetof(ABP_LightModel_C, UseMaterial_LOD) == 0x0002E9, "Member 'ABP_LightModel_C::UseMaterial_LOD' has a wrong offset!");

}

