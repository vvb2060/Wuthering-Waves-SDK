#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ocean_Data

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ocean_Data.BP_Ocean_Data_C
// 0x0100 (0x0138 - 0x0038)
class UBP_Ocean_Data_C final : public UPrimaryDataAsset
{
public:
	struct FLinearColor                           FlickerColor;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HightLightFlickerColor;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerDepth;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlowmapFlickerScale;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FoamColor;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlowmapFoamScale;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamNormalFlatten;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FoamEmissiveColor;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveProfileAnimationSpeed;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveProfileDistance;                               // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveProfileSpeed;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveProfileWidth;                                  // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FluxWaveProfileDecode;                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScatteringColor;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScatteringShoreline;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScatteringFoam;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScatteringInside;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AbsorptionColor;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AbsorptionColorInside;                             // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Anisotropy;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorScaleBehindWater;                             // 0x010C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WaterColorTint;                                    // 0x011C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CausticBrightness;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityScale;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityPow;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ocean_Data_C">();
	}
	static class UBP_Ocean_Data_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Ocean_Data_C>();
	}
};
static_assert(alignof(UBP_Ocean_Data_C) == 0x000008, "Wrong alignment on UBP_Ocean_Data_C");
static_assert(sizeof(UBP_Ocean_Data_C) == 0x000138, "Wrong size on UBP_Ocean_Data_C");
static_assert(offsetof(UBP_Ocean_Data_C, FlickerColor) == 0x000038, "Member 'UBP_Ocean_Data_C::FlickerColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, HightLightFlickerColor) == 0x000048, "Member 'UBP_Ocean_Data_C::HightLightFlickerColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FlickerDepth) == 0x000058, "Member 'UBP_Ocean_Data_C::FlickerDepth' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FlowmapFlickerScale) == 0x00005C, "Member 'UBP_Ocean_Data_C::FlowmapFlickerScale' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FoamColor) == 0x000060, "Member 'UBP_Ocean_Data_C::FoamColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FlowmapFoamScale) == 0x000070, "Member 'UBP_Ocean_Data_C::FlowmapFoamScale' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FoamNormalFlatten) == 0x000074, "Member 'UBP_Ocean_Data_C::FoamNormalFlatten' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FoamEmissiveColor) == 0x000078, "Member 'UBP_Ocean_Data_C::FoamEmissiveColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, WaveProfileAnimationSpeed) == 0x000088, "Member 'UBP_Ocean_Data_C::WaveProfileAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, WaveProfileDistance) == 0x00008C, "Member 'UBP_Ocean_Data_C::WaveProfileDistance' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, WaveProfileSpeed) == 0x000090, "Member 'UBP_Ocean_Data_C::WaveProfileSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, WaveProfileWidth) == 0x000094, "Member 'UBP_Ocean_Data_C::WaveProfileWidth' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, FluxWaveProfileDecode) == 0x000098, "Member 'UBP_Ocean_Data_C::FluxWaveProfileDecode' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, ScatteringColor) == 0x0000A8, "Member 'UBP_Ocean_Data_C::ScatteringColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, ScatteringShoreline) == 0x0000B8, "Member 'UBP_Ocean_Data_C::ScatteringShoreline' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, ScatteringFoam) == 0x0000C8, "Member 'UBP_Ocean_Data_C::ScatteringFoam' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, ScatteringInside) == 0x0000D8, "Member 'UBP_Ocean_Data_C::ScatteringInside' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, AbsorptionColor) == 0x0000E8, "Member 'UBP_Ocean_Data_C::AbsorptionColor' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, AbsorptionColorInside) == 0x0000F8, "Member 'UBP_Ocean_Data_C::AbsorptionColorInside' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, Anisotropy) == 0x000108, "Member 'UBP_Ocean_Data_C::Anisotropy' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, ColorScaleBehindWater) == 0x00010C, "Member 'UBP_Ocean_Data_C::ColorScaleBehindWater' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, WaterColorTint) == 0x00011C, "Member 'UBP_Ocean_Data_C::WaterColorTint' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, CausticBrightness) == 0x00012C, "Member 'UBP_Ocean_Data_C::CausticBrightness' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, VelocityScale) == 0x000130, "Member 'UBP_Ocean_Data_C::VelocityScale' has a wrong offset!");
static_assert(offsetof(UBP_Ocean_Data_C, VelocityPow) == 0x000134, "Member 'UBP_Ocean_Data_C::VelocityPow' has a wrong offset!");

}

