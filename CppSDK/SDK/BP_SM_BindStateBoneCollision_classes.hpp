#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SM_BindStateBoneCollision

#include "Basic.hpp"

#include "SMSystem_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SM_BindStateBoneCollision.BP_SM_BindStateBoneCollision_C
// 0x0018 (0x0048 - 0x0030)
class UBP_SM_BindStateBoneCollision_C final : public UASMBindState
{
public:
	class FString                                 骨骼名;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          阻挡角色;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          阻挡子弹;                                          // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          阻挡镜头;                                          // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          退出节点时阻挡角色;                                // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          退出节点时阻挡子弹;                                // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          退出节点时阻挡镜头;                                // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SM_BindStateBoneCollision_C">();
	}
	static class UBP_SM_BindStateBoneCollision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SM_BindStateBoneCollision_C>();
	}
};
static_assert(alignof(UBP_SM_BindStateBoneCollision_C) == 0x000008, "Wrong alignment on UBP_SM_BindStateBoneCollision_C");
static_assert(sizeof(UBP_SM_BindStateBoneCollision_C) == 0x000048, "Wrong size on UBP_SM_BindStateBoneCollision_C");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 骨骼名) == 0x000030, "Member 'UBP_SM_BindStateBoneCollision_C::骨骼名' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 阻挡角色) == 0x000040, "Member 'UBP_SM_BindStateBoneCollision_C::阻挡角色' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 阻挡子弹) == 0x000041, "Member 'UBP_SM_BindStateBoneCollision_C::阻挡子弹' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 阻挡镜头) == 0x000042, "Member 'UBP_SM_BindStateBoneCollision_C::阻挡镜头' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 退出节点时阻挡角色) == 0x000043, "Member 'UBP_SM_BindStateBoneCollision_C::退出节点时阻挡角色' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 退出节点时阻挡子弹) == 0x000044, "Member 'UBP_SM_BindStateBoneCollision_C::退出节点时阻挡子弹' has a wrong offset!");
static_assert(offsetof(UBP_SM_BindStateBoneCollision_C, 退出节点时阻挡镜头) == 0x000045, "Member 'UBP_SM_BindStateBoneCollision_C::退出节点时阻挡镜头' has a wrong offset!");

}

