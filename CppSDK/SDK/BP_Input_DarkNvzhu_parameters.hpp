#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_DarkNvzhu

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "sInputCommand_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_DarkNvzhu.BP_Input_DarkNvzhu_C.攻击按下
// 0x0450 (0x0450 - 0x0000)
struct BP_Input_DarkNvzhu_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x003C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0068(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x008C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x00A8(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_3;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x00C8(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x00DC(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x00F0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0104(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x011C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_3;                                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0138(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0158(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0168(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_4;                                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x01A0(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x01C0(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x01D0(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x01DC(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F6[0x2];                                      // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x020C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_12;        // 0x0220(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_13;        // 0x024C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_14;        // 0x0274(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4; // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5; // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_15;        // 0x02B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6; // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_4;        // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_5;                                 // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7; // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_9; // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0328(0x0010)(ReferenceParm)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0350(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_10; // 0x0360(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_10;    // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x0380(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_11; // 0x03A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_11;    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x03B8(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item_4;                         // 0x03C8(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x03D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2[0x2];                                      // 0x03F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_16;        // 0x03F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_12; // 0x0408(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_12;    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_13; // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_13;    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_14; // 0x0438(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_14;    // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNvzhu_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_DarkNvzhu_C_攻击按下");
static_assert(sizeof(BP_Input_DarkNvzhu_C_攻击按下) == 0x000450, "Wrong size on BP_Input_DarkNvzhu_C_攻击按下");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, time) == 0x000000, "Member 'BP_Input_DarkNvzhu_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNvzhu_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x00002C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x00002D, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x00002F, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000030, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000034, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00003C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000050, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Array_Index_Variable) == 0x000064, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000068, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable) == 0x00007C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable_1) == 0x000080, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Array_Index_Variable_1) == 0x000084, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x000088, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x000089, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x00008C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable_2) == 0x0000A0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x0000A4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x0000A8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x0000BC, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_3) == 0x0000C0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0000C8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x0000DC, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x0000F0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000104, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000118, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x000119, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x00011C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable_3) == 0x000130, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000138, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000158, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item) == 0x000168, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000174, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable_4) == 0x000178, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00017C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000180, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000190, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000191, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000192, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x000193, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Array_Index_Variable_2) == 0x000194, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x000198, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0001A0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x0001C0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x0001D0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x0001DC, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x0001F0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x0001F4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x0001F5, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0001F8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000208, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x00020C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_12) == 0x000220, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000238, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000248, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_13) == 0x00024C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000260, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000270, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_14) == 0x000274, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x000288, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000298, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x0002A0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x0002B0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_15) == 0x0002B4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x0002C8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x0002D8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_4) == 0x0002D9, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Variable_5) == 0x0002DC, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x0002E0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x0002F0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x0002F8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x000308, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_9) == 0x000310, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x000320, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, K2Node_MakeArray_Array) == 0x000328, "Member 'BP_Input_DarkNvzhu_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x000338, "Member 'BP_Input_DarkNvzhu_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x00033C, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x000340, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x000344, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x000348, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000349, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, K2Node_MakeArray_Array_1) == 0x000350, "Member 'BP_Input_DarkNvzhu_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_10) == 0x000360, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_10' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_10) == 0x000370, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x000374, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000378, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x000380, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_11) == 0x0003A0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_11' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_11) == 0x0003B0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x0003B8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x0003C8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x0003D4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, K2Node_MakeArray_Array_2) == 0x0003D8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x0003E8, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x0003EC, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x0003F0, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x0003F1, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_16) == 0x0003F4, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_12) == 0x000408, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_12' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_12) == 0x000418, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_13) == 0x000420, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_13' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_13) == 0x000430, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_14) == 0x000438, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_14' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_14) == 0x000448, "Member 'BP_Input_DarkNvzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_14' has a wrong offset!");

// Function BP_Input_DarkNvzhu.BP_Input_DarkNvzhu_C.攻击长按
// 0x0098 (0x0098 - 0x0000)
struct BP_Input_DarkNvzhu_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0068(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNvzhu_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_DarkNvzhu_C_攻击长按");
static_assert(sizeof(BP_Input_DarkNvzhu_C_攻击长按) == 0x000098, "Wrong size on BP_Input_DarkNvzhu_C_攻击长按");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, time) == 0x000000, "Member 'BP_Input_DarkNvzhu_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNvzhu_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000040, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000044, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000048, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x00004E, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004F, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x000051, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000054, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000068, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000080, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000090, "Member 'BP_Input_DarkNvzhu_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_DarkNvzhu.BP_Input_DarkNvzhu_C.技能1按下
// 0x00D0 (0x00D0 - 0x0000)
struct BP_Input_DarkNvzhu_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0044(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x0060(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x00A4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNvzhu_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_DarkNvzhu_C_技能1按下");
static_assert(sizeof(BP_Input_DarkNvzhu_C_技能1按下) == 0x0000D0, "Wrong size on BP_Input_DarkNvzhu_C_技能1按下");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, time) == 0x000000, "Member 'BP_Input_DarkNvzhu_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNvzhu_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000030, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000044, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000058, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000059, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00005A, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x00005B, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x00005C, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x000060, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000078, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000088, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000090, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc___1___ReturnValue) == 0x0000A4, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0000B8, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0000C8, "Member 'BP_Input_DarkNvzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");

// Function BP_Input_DarkNvzhu.BP_Input_DarkNvzhu_C.大招按下
// 0x0070 (0x0070 - 0x0000)
struct BP_Input_DarkNvzhu_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0020(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNvzhu_C_大招按下) == 0x000008, "Wrong alignment on BP_Input_DarkNvzhu_C_大招按下");
static_assert(sizeof(BP_Input_DarkNvzhu_C_大招按下) == 0x000070, "Wrong size on BP_Input_DarkNvzhu_C_大招按下");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, time) == 0x000000, "Member 'BP_Input_DarkNvzhu_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNvzhu_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000018, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00001A, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_BooleanOR_ReturnValue) == 0x00001D, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000020, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000034, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000038, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x00004C, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000058, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNvzhu_C_大招按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000068, "Member 'BP_Input_DarkNvzhu_C_大招按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

}

