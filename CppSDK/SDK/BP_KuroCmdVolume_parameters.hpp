#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroCmdVolume

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.GetCamearPosition
// 0x00B0 (0x00B0 - 0x0000)
struct BP_KuroCmdVolume_C_GetCamearPosition final
{
public:
	bool                                          CallFunc_GetCameraTransform_Success;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       CallFunc_GetCameraTransform_Transform;             // 0x0010(0x0040)(IsPlainOldData, NoDestructor)
	struct FVectorDouble                          CallFunc_BreakTransformDouble_Location;            // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransformDouble_Rotation;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransformDouble_Scale;               // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLevelEditorCameraLocationAndForward_Position; // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetLevelEditorCameraLocationAndForward_Rotation; // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue; // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCmdVolume_C_GetCamearPosition) == 0x000010, "Wrong alignment on BP_KuroCmdVolume_C_GetCamearPosition");
static_assert(sizeof(BP_KuroCmdVolume_C_GetCamearPosition) == 0x0000B0, "Wrong size on BP_KuroCmdVolume_C_GetCamearPosition");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_GetCameraTransform_Success) == 0x000000, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_GetCameraTransform_Success' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_GetCameraTransform_Transform) == 0x000010, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_GetCameraTransform_Transform' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_BreakTransformDouble_Location) == 0x000050, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_BreakTransformDouble_Location' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_BreakTransformDouble_Rotation) == 0x000068, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_BreakTransformDouble_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_BreakTransformDouble_Scale) == 0x000074, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_BreakTransformDouble_Scale' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_GetLevelEditorCameraLocationAndForward_Position) == 0x000080, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_GetLevelEditorCameraLocationAndForward_Position' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_GetLevelEditorCameraLocationAndForward_Rotation) == 0x00008C, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_GetLevelEditorCameraLocationAndForward_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue) == 0x000098, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_GetCamearPosition, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x00009C, "Member 'BP_KuroCmdVolume_C_GetCamearPosition::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.HasValidCmd
// 0x0038 (0x0038 - 0x0000)
struct BP_KuroCmdVolume_C_HasValidCmd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Variable;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Variable_1;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_Select_Default;                             // 0x0008(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_Select_Default_1;                           // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCmdVolume_C_HasValidCmd) == 0x000008, "Wrong alignment on BP_KuroCmdVolume_C_HasValidCmd");
static_assert(sizeof(BP_KuroCmdVolume_C_HasValidCmd) == 0x000038, "Wrong size on BP_KuroCmdVolume_C_HasValidCmd");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, ReturnValue) == 0x000000, "Member 'BP_KuroCmdVolume_C_HasValidCmd::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, ___bool_Variable) == 0x000001, "Member 'BP_KuroCmdVolume_C_HasValidCmd::___bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, ___bool_Variable_1) == 0x000002, "Member 'BP_KuroCmdVolume_C_HasValidCmd::___bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, K2Node_Select_Default) == 0x000008, "Member 'BP_KuroCmdVolume_C_HasValidCmd::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_KuroCmdVolume_C_HasValidCmd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'BP_KuroCmdVolume_C_HasValidCmd::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, K2Node_Select_Default_1) == 0x000020, "Member 'BP_KuroCmdVolume_C_HasValidCmd::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_KuroCmdVolume_C_HasValidCmd::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_KuroCmdVolume_C_HasValidCmd::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_HasValidCmd, CallFunc_BooleanOR_ReturnValue) == 0x000035, "Member 'BP_KuroCmdVolume_C_HasValidCmd::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.UserConstructionScript
// 0x00A0 (0x00A0 - 0x0000)
struct BP_KuroCmdVolume_C_UserConstructionScript final
{
public:
	EBP_EWorldType                                CallFunc_GetWorldType_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetComponentLocation_ReturnValue;    // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransformDouble                       CallFunc_D_K2_GetComponentToWorld_ReturnValue;     // 0x0030(0x0040)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_Conv_TransformDoubleToTransform_ReturnValue; // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCmdVolume_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_KuroCmdVolume_C_UserConstructionScript");
static_assert(sizeof(BP_KuroCmdVolume_C_UserConstructionScript) == 0x0000A0, "Wrong size on BP_KuroCmdVolume_C_UserConstructionScript");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_GetWorldType_ReturnValue) == 0x000000, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_GetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_D_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_D_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x000024, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_D_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_D_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_UserConstructionScript, CallFunc_Conv_TransformDoubleToTransform_ReturnValue) == 0x000070, "Member 'BP_KuroCmdVolume_C_UserConstructionScript::CallFunc_Conv_TransformDoubleToTransform_ReturnValue' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroCmdVolume_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCmdVolume_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_KuroCmdVolume_C_ReceiveTick");
static_assert(sizeof(BP_KuroCmdVolume_C_ReceiveTick) == 0x000004, "Wrong size on BP_KuroCmdVolume_C_ReceiveTick");
static_assert(offsetof(BP_KuroCmdVolume_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_KuroCmdVolume_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.EditorTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroCmdVolume_C_EditorTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCmdVolume_C_EditorTick) == 0x000004, "Wrong alignment on BP_KuroCmdVolume_C_EditorTick");
static_assert(sizeof(BP_KuroCmdVolume_C_EditorTick) == 0x000004, "Wrong size on BP_KuroCmdVolume_C_EditorTick");
static_assert(offsetof(BP_KuroCmdVolume_C_EditorTick, DeltaSeconds) == 0x000000, "Member 'BP_KuroCmdVolume_C_EditorTick::DeltaSeconds' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_KuroCmdVolume_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCmdVolume_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_KuroCmdVolume_C_ReceiveEndPlay");
static_assert(sizeof(BP_KuroCmdVolume_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_KuroCmdVolume_C_ReceiveEndPlay");
static_assert(offsetof(BP_KuroCmdVolume_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_KuroCmdVolume_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_KuroCmdVolume.BP_KuroCmdVolume_C.ExecuteUbergraph_BP_KuroCmdVolume
// 0x0118 (0x0118 - 0x0000)
struct BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable_1;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds_1;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue_1;  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentPlatformPC_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBP_EWorldType                                CallFunc_GetWorldType_ReturnValue;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_Select_Default;                             // 0x0068(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_Select_Default_1;                           // 0x0090(0x0010)(ReferenceParm)
	struct FVectorDouble                          CallFunc_D_K2_GetComponentScale_ReturnValue;       // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorVector_ReturnValue;      // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasValidCmd_ReturnValue;                  // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPointInBoxWithTransform_ReturnValue;    // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume) == 0x000008, "Wrong alignment on BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume");
static_assert(sizeof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume) == 0x000118, "Wrong size on BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, EntryPoint) == 0x000000, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___int_Loop_Counter_Variable) == 0x000004, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___bool_Variable) == 0x000008, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___bool_Variable_1) == 0x000010, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___int_Array_Index_Variable) == 0x000014, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___int_Loop_Counter_Variable_1) == 0x000018, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, ___int_Array_Index_Variable_1) == 0x000020, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, K2Node_Event_DeltaSeconds_1) == 0x000024, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::K2Node_Event_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x000030, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Conv_VectorToVectorDouble_ReturnValue_1) == 0x000048, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Conv_VectorToVectorDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_IsCurrentPlatformPC_ReturnValue) == 0x000060, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_IsCurrentPlatformPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_GetWorldType_ReturnValue) == 0x000061, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_GetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, K2Node_Select_Default) == 0x000068, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, K2Node_Select_Default_1) == 0x000090, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_D_K2_GetComponentScale_ReturnValue) == 0x0000A0, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_D_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_D_Multiply_VectorVector_ReturnValue) == 0x0000C8, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_D_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000E4, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F0, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_HasValidCmd_ReturnValue) == 0x0000F1, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_HasValidCmd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0000F2, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_IsPointInBoxWithTransform_ReturnValue) == 0x0000F3, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_IsPointInBoxWithTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, K2Node_Event_EndPlayReason) == 0x0000F4, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000F8, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'BP_KuroCmdVolume_C_ExecuteUbergraph_BP_KuroCmdVolume::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

}

