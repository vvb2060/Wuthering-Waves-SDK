#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Move_GYXK

#include "Basic.hpp"

#include "EHookInteractTypeBp_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Move_GYXK.GA_Move_GYXK_C
// 0x00A8 (0x0610 - 0x0568)
class UGA_Move_GYXK_C final : public UGA_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Move_GYXK_C;                     // 0x0568(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVectorDouble                          起始点;                                            // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标点;                                            // 0x0588(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        插值变量;                                          // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        插值增量;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        全程距离;                                          // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        预设速度;                                          // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        位移时间;                                          // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        位移帧数;                                          // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          标准化朝向;                                        // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         斩击钩锁点类型;                                    // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否有注视配置;                                    // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          注视点;                                            // 0x05F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Move_GYXK(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void 设置最终位置及朝向();
	void 设置当前交互点();
	void 设置安全点位置及朝向();
	void 瞬移特效();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Move_GYXK_C">();
	}
	static class UGA_Move_GYXK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Move_GYXK_C>();
	}
};
static_assert(alignof(UGA_Move_GYXK_C) == 0x000008, "Wrong alignment on UGA_Move_GYXK_C");
static_assert(sizeof(UGA_Move_GYXK_C) == 0x000610, "Wrong size on UGA_Move_GYXK_C");
static_assert(offsetof(UGA_Move_GYXK_C, UberGraphFrame_GA_Move_GYXK_C) == 0x000568, "Member 'UGA_Move_GYXK_C::UberGraphFrame_GA_Move_GYXK_C' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 起始点) == 0x000570, "Member 'UGA_Move_GYXK_C::起始点' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 目标点) == 0x000588, "Member 'UGA_Move_GYXK_C::目标点' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 插值变量) == 0x0005A0, "Member 'UGA_Move_GYXK_C::插值变量' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 插值增量) == 0x0005A8, "Member 'UGA_Move_GYXK_C::插值增量' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 全程距离) == 0x0005B0, "Member 'UGA_Move_GYXK_C::全程距离' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 预设速度) == 0x0005B8, "Member 'UGA_Move_GYXK_C::预设速度' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 位移时间) == 0x0005C0, "Member 'UGA_Move_GYXK_C::位移时间' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 位移帧数) == 0x0005C8, "Member 'UGA_Move_GYXK_C::位移帧数' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 标准化朝向) == 0x0005D0, "Member 'UGA_Move_GYXK_C::标准化朝向' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 斩击钩锁点类型) == 0x0005E8, "Member 'UGA_Move_GYXK_C::斩击钩锁点类型' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 是否有注视配置) == 0x0005F0, "Member 'UGA_Move_GYXK_C::是否有注视配置' has a wrong offset!");
static_assert(offsetof(UGA_Move_GYXK_C, 注视点) == 0x0005F8, "Member 'UGA_Move_GYXK_C::注视点' has a wrong offset!");

}

