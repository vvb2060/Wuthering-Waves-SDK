#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataTableUtil

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ECamp_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DataTableUtil.DataTableUtil_C
// 0x0000 (0x0030 - 0x0030)
class UDataTableUtil_C final : public UBlueprintFunctionLibrary
{
public:
	static void LoadRoleQualityInfo(const class FString& Row, class UObject* __WorldContext, bool* bSucc, struct FSRoleQualityInfo* result);
	static void LoadModelConfig(const class FString& Row, class UObject* __WorldContext, bool* bSucc, struct FSModelConfig* result);
	static void LoadServerInfo(class UObject* __WorldContext, TArray<struct FSServerInfo>* NewParam);
	static void LoadVisionInfo(const class FString& phantomId, class UObject* __WorldContext, struct FSVisionData* visionConfig, bool* found);
	static void LoadSeqNetworksInfo(class UDataTable* inSeqNetwork, const class FString& inRow, class UObject* __WorldContext, struct FSSequencesNetwork* outInfo, bool* outIsFound);
	static void LoadGmOrderInfo(class UObject* __WorldContext, TArray<struct FSGMOrderInfo>* gmInfoList1);
	static void LoadConditionGroupInfo(const class FString& inRow, class UObject* __WorldContext, struct FSConditionGroup* outConfig, bool* outFound);
	static void LoadCipherInfo(const class FString& inRow, class UObject* __WorldContext, struct FSCipherGameplay* outConfig, bool* outFound);
	static void LoadInteractionConfig(const class FString& inRow, class UObject* __WorldContext, struct FSInteractionConfig* ouConfig, bool* outFound);
	static struct FSUiCameraAnimationSettings LoadUiCameraAnimationSettings(const class FString& RowName, class UObject* __WorldContext, bool* bFound);
	static struct FSUiCameraAnimationBlendSettings LoadUiCameraAnimationBlendSettings(const class FString& RowName, class UObject* __WorldContext, bool* bFound);
	static void LoadAIConfig(const class FString& inConfigId, class UObject* __WorldContext, struct FSAIConfig* Out_Row, bool* outFound);
	static void LoadCampConfig(int32 CampNum, class UObject* __WorldContext, struct FSCamp* CampInfo, bool* Found);
	static void LoadHitMapConfig(int32 MapId, class UObject* __WorldContext, struct FSHitMapping* result, bool* found);
	static void GetCampNum(int32 Camp, class UObject* __WorldContext, ECamp* Num);
	static TArray<struct FSCamp> LoadAllCampConfigs(class UObject* __WorldContext);
	static void LoadParkourConfig(class FName RowName, class UObject* __WorldContext, struct FSParkourConfig* 输出行, bool* found);
	static TArray<struct FSSkillMontage> LoadAllSkillMontages(class UObject* __WorldContext);
	static void LoadCharacterFightInfo(class UDataTable* CharacterFightInfo, const class FString& CharacterResourcePath, class UObject* __WorldContext, struct FSCharacterFightInfo* outInfo, bool* outIsFound);
	static void LoadManipulatePrecastConfig(const class FString& inRow, class UObject* __WorldContext, struct FSManipulateConfig* outConfig, bool* outFound);
	static void LoadManipulateItemConfig(const class FString& inRow, class UObject* __WorldContext, struct FSManipulateConfig* outConfig, bool* outFound);
	static struct FSSceneDecorationConfig LoadSceneDecorationConfig(const class FString& RowName, class UObject* __WorldContext, bool* bFound);
	static struct FSSceneUITagConfig LoadSceneUITagConfig(const class FString& RowName, class UObject* __WorldContext, bool* bFound);
	static void LoadAllAiWeaponSockets(class UObject* __WorldContext, TMap<int32, struct FSAiWeaponSocket>* Sockets);
	static void LoadAiWeaponSocket(class FName RowName, class UObject* __WorldContext, struct FSAiWeaponSocket* Out_Row);
	static void LoadAiWeaponSocketConfigs(class FName RowName, const int32& Key, class UObject* __WorldContext, struct FSWeaponSocketItem* Weapon);
	static void GetDataTableOnEditor(const class FString& path, class UObject* __WorldContext, class UDataTable** Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DataTableUtil_C">();
	}
	static class UDataTableUtil_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataTableUtil_C>();
	}
};
static_assert(alignof(UDataTableUtil_C) == 0x000008, "Wrong alignment on UDataTableUtil_C");
static_assert(sizeof(UDataTableUtil_C) == 0x000030, "Wrong size on UDataTableUtil_C");

}

