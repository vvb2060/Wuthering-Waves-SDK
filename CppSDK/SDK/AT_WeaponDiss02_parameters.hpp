#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AT_WeaponDiss02

#include "Basic.hpp"


namespace SDK::Params
{

// Function AT_WeaponDiss02.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_KuroMasterSeqEvent_C*               BP_KuroMasterSeqEvent_C_0;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_KuroMasterSeqEvent_C_0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_KuroMasterSeqEvent_C_0' has a wrong offset!");

// Function AT_WeaponDiss02.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_KuroMasterSeqEvent_C*               BP_KuroMasterSeqEvent_C_0;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_KuroMasterSeqEvent_C_0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_KuroMasterSeqEvent_C_0' has a wrong offset!");

// Function AT_WeaponDiss02.SequenceDirector_C.执行实体帧事件_0
// 0x0020 (0x0020 - 0x0000)
struct SequenceDirector_C_执行实体帧事件_0 final
{
public:
	class ABP_KuroMasterSeqEvent_C*               BP_KuroMasterSeqEvent_C_0;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         EntityId;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_执行实体帧事件_0) == 0x000008, "Wrong alignment on SequenceDirector_C_执行实体帧事件_0");
static_assert(sizeof(SequenceDirector_C_执行实体帧事件_0) == 0x000020, "Wrong size on SequenceDirector_C_执行实体帧事件_0");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_0, BP_KuroMasterSeqEvent_C_0) == 0x000000, "Member 'SequenceDirector_C_执行实体帧事件_0::BP_KuroMasterSeqEvent_C_0' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_0, Key) == 0x000008, "Member 'SequenceDirector_C_执行实体帧事件_0::Key' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_0, EntityId) == 0x000018, "Member 'SequenceDirector_C_执行实体帧事件_0::EntityId' has a wrong offset!");

// Function AT_WeaponDiss02.SequenceDirector_C.执行实体帧事件_1
// 0x0020 (0x0020 - 0x0000)
struct SequenceDirector_C_执行实体帧事件_1 final
{
public:
	class ABP_KuroMasterSeqEvent_C*               BP_KuroMasterSeqEvent_C_0;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         EntityId;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_执行实体帧事件_1) == 0x000008, "Wrong alignment on SequenceDirector_C_执行实体帧事件_1");
static_assert(sizeof(SequenceDirector_C_执行实体帧事件_1) == 0x000020, "Wrong size on SequenceDirector_C_执行实体帧事件_1");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_1, BP_KuroMasterSeqEvent_C_0) == 0x000000, "Member 'SequenceDirector_C_执行实体帧事件_1::BP_KuroMasterSeqEvent_C_0' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_1, Key) == 0x000008, "Member 'SequenceDirector_C_执行实体帧事件_1::Key' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_执行实体帧事件_1, EntityId) == 0x000018, "Member 'SequenceDirector_C_执行实体帧事件_1::EntityId' has a wrong offset!");

// Function AT_WeaponDiss02.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0048 (0x0048 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_KuroMasterSeqEvent_C*               K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_Key;                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_EntityId;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_KuroMasterSeqEvent_C*               K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0_1;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_Key_1;                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_EntityId_1;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000048, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Key) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Key' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_EntityId) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_EntityId' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0_1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_KuroMasterSeqEvent_C_0_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Key_1) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Key_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_EntityId_1) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_EntityId_1' has a wrong offset!");

}

