#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "KawaiiPhysics_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KawaiiPhysics.KawaiiPhysicsConfig
// 0x0008 (0x0038 - 0x0030)
class UKawaiiPhysicsConfig final : public UObject
{
public:
	bool                                          bEnableSimulate;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SimulateAllowLOD;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KawaiiPhysicsConfig">();
	}
	static class UKawaiiPhysicsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKawaiiPhysicsConfig>();
	}
};
static_assert(alignof(UKawaiiPhysicsConfig) == 0x000008, "Wrong alignment on UKawaiiPhysicsConfig");
static_assert(sizeof(UKawaiiPhysicsConfig) == 0x000038, "Wrong size on UKawaiiPhysicsConfig");
static_assert(offsetof(UKawaiiPhysicsConfig, bEnableSimulate) == 0x000030, "Member 'UKawaiiPhysicsConfig::bEnableSimulate' has a wrong offset!");
static_assert(offsetof(UKawaiiPhysicsConfig, SimulateAllowLOD) == 0x000034, "Member 'UKawaiiPhysicsConfig::SimulateAllowLOD' has a wrong offset!");

// Class KawaiiPhysics.KawaiiPhysicsLimitsDataAsset
// 0x0030 (0x0068 - 0x0038)
class UKawaiiPhysicsLimitsDataAsset final : public UDataAsset
{
public:
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KawaiiPhysicsLimitsDataAsset">();
	}
	static class UKawaiiPhysicsLimitsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKawaiiPhysicsLimitsDataAsset>();
	}
};
static_assert(alignof(UKawaiiPhysicsLimitsDataAsset) == 0x000008, "Wrong alignment on UKawaiiPhysicsLimitsDataAsset");
static_assert(sizeof(UKawaiiPhysicsLimitsDataAsset) == 0x000068, "Wrong size on UKawaiiPhysicsLimitsDataAsset");
static_assert(offsetof(UKawaiiPhysicsLimitsDataAsset, SphericalLimits) == 0x000038, "Member 'UKawaiiPhysicsLimitsDataAsset::SphericalLimits' has a wrong offset!");
static_assert(offsetof(UKawaiiPhysicsLimitsDataAsset, CapsuleLimits) == 0x000048, "Member 'UKawaiiPhysicsLimitsDataAsset::CapsuleLimits' has a wrong offset!");
static_assert(offsetof(UKawaiiPhysicsLimitsDataAsset, PlanarLimits) == 0x000058, "Member 'UKawaiiPhysicsLimitsDataAsset::PlanarLimits' has a wrong offset!");

}

