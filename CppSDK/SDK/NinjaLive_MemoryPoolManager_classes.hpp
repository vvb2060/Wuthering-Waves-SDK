#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLive_MemoryPoolManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SimPrecision_Enum_structs.hpp"
#include "RenderTargetListItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLive_MemoryPoolManager.NinjaLive_MemoryPoolManager_C
// 0x0090 (0x0340 - 0x02B0)
class ANinjaLive_MemoryPoolManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            EditorIcon;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableMemoryManager;                              // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmountOfRenderTargetSetsToGenerate;                // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESimPrecision_Enum                            Precision;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrecisionIndex;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResolutionX;                                       // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResolutionY;                                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRenderTargetListItem>          R_RenderTargetsList;                               // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRenderTargetListItem>          RG_RenderTargetsList;                              // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRenderTargetListItem>          RGBA_RenderTargetsList;                            // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MMInitFinished;                                    // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PrintInitDebugMessages;                            // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PrintRuntimeDebugMsg;                              // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PrintRuntimeDebugMsgVerbose;                       // 0x0313(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DebugTextLifetime;                                 // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExtraRenderTargetsForDensityInput;                 // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MemConsumptionTotal;                               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveDebugTextToDefaultLog;                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MemAvailableMax;                                   // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HalfResPressureAndDivergenceBuffers;               // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SimAreaClamp;                                      // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void PrintMemStatus(class UObject* Consumer, float MemConsumption, bool TakenOrReturned);
	void ExecuteUbergraph_NinjaLive_MemoryPoolManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetRenderTargetAttribs(class UTextureRenderTarget2D* InputPin, bool Clamping, class UTextureRenderTarget2D** RT);
	void MemCount(int32 NumberOfChannels, int32 ResolutionX_0, int32 ResolutionY_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLive_MemoryPoolManager_C">();
	}
	static class ANinjaLive_MemoryPoolManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANinjaLive_MemoryPoolManager_C>();
	}
};
static_assert(alignof(ANinjaLive_MemoryPoolManager_C) == 0x000008, "Wrong alignment on ANinjaLive_MemoryPoolManager_C");
static_assert(sizeof(ANinjaLive_MemoryPoolManager_C) == 0x000340, "Wrong size on ANinjaLive_MemoryPoolManager_C");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, UberGraphFrame) == 0x0002B0, "Member 'ANinjaLive_MemoryPoolManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, EditorIcon) == 0x0002B8, "Member 'ANinjaLive_MemoryPoolManager_C::EditorIcon' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, Root) == 0x0002C0, "Member 'ANinjaLive_MemoryPoolManager_C::Root' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, DisableMemoryManager) == 0x0002C8, "Member 'ANinjaLive_MemoryPoolManager_C::DisableMemoryManager' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, AmountOfRenderTargetSetsToGenerate) == 0x0002CC, "Member 'ANinjaLive_MemoryPoolManager_C::AmountOfRenderTargetSetsToGenerate' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, Precision) == 0x0002D0, "Member 'ANinjaLive_MemoryPoolManager_C::Precision' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, PrecisionIndex) == 0x0002D4, "Member 'ANinjaLive_MemoryPoolManager_C::PrecisionIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, ResolutionX) == 0x0002D8, "Member 'ANinjaLive_MemoryPoolManager_C::ResolutionX' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, ResolutionY) == 0x0002DC, "Member 'ANinjaLive_MemoryPoolManager_C::ResolutionY' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, R_RenderTargetsList) == 0x0002E0, "Member 'ANinjaLive_MemoryPoolManager_C::R_RenderTargetsList' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, RG_RenderTargetsList) == 0x0002F0, "Member 'ANinjaLive_MemoryPoolManager_C::RG_RenderTargetsList' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, RGBA_RenderTargetsList) == 0x000300, "Member 'ANinjaLive_MemoryPoolManager_C::RGBA_RenderTargetsList' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, MMInitFinished) == 0x000310, "Member 'ANinjaLive_MemoryPoolManager_C::MMInitFinished' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, PrintInitDebugMessages) == 0x000311, "Member 'ANinjaLive_MemoryPoolManager_C::PrintInitDebugMessages' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, PrintRuntimeDebugMsg) == 0x000312, "Member 'ANinjaLive_MemoryPoolManager_C::PrintRuntimeDebugMsg' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, PrintRuntimeDebugMsgVerbose) == 0x000313, "Member 'ANinjaLive_MemoryPoolManager_C::PrintRuntimeDebugMsgVerbose' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, DebugTextLifetime) == 0x000314, "Member 'ANinjaLive_MemoryPoolManager_C::DebugTextLifetime' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, ExtraRenderTargetsForDensityInput) == 0x000318, "Member 'ANinjaLive_MemoryPoolManager_C::ExtraRenderTargetsForDensityInput' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, MemConsumptionTotal) == 0x00031C, "Member 'ANinjaLive_MemoryPoolManager_C::MemConsumptionTotal' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, SaveDebugTextToDefaultLog) == 0x000320, "Member 'ANinjaLive_MemoryPoolManager_C::SaveDebugTextToDefaultLog' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, MemAvailableMax) == 0x000328, "Member 'ANinjaLive_MemoryPoolManager_C::MemAvailableMax' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, HalfResPressureAndDivergenceBuffers) == 0x000338, "Member 'ANinjaLive_MemoryPoolManager_C::HalfResPressureAndDivergenceBuffers' has a wrong offset!");
static_assert(offsetof(ANinjaLive_MemoryPoolManager_C, SimAreaClamp) == 0x000339, "Member 'ANinjaLive_MemoryPoolManager_C::SimAreaClamp' has a wrong offset!");

}

