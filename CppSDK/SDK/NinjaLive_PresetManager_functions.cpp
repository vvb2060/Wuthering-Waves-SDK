#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLive_PresetManager

#include "Basic.hpp"

#include "NinjaLive_PresetManager_classes.hpp"
#include "NinjaLive_PresetManager_parameters.hpp"


namespace SDK
{

// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.MarkForSave_UE426_BugWorkaround
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          CurrentAsset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::MarkForSave_UE426_BugWorkaround(class UObject* CurrentAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "MarkForSave_UE426_BugWorkaround");

	Params::NinjaLive_PresetManager_C_MarkForSave_UE426_BugWorkaround Parms{};

	Parms.CurrentAsset = CurrentAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.ConvertToPowerOfTwo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::ConvertToPowerOfTwo(int32 In, int32* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "ConvertToPowerOfTwo");

	Params::NinjaLive_PresetManager_C_ConvertToPowerOfTwo Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.GetCurrentLevelInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            LevelName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            LevelPath                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::GetCurrentLevelInfo(class FName* LevelName, class FName* LevelPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "GetCurrentLevelInfo");

	Params::NinjaLive_PresetManager_C_GetCurrentLevelInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelName != nullptr)
		*LevelName = Parms.LevelName;

	if (LevelPath != nullptr)
		*LevelPath = Parms.LevelPath;
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.MarkNewFilesAsUnsaved
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAssetData>&              ArrayOfUnsaveAssetData                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ANinjaLive_PresetManager_C::MarkNewFilesAsUnsaved(TArray<struct FAssetData>& ArrayOfUnsaveAssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "MarkNewFilesAsUnsaved");

	Params::NinjaLive_PresetManager_C_MarkNewFilesAsUnsaved Parms{};

	Parms.ArrayOfUnsaveAssetData = std::move(ArrayOfUnsaveAssetData);

	UObject::ProcessEvent(Func, &Parms);

	ArrayOfUnsaveAssetData = std::move(Parms.ArrayOfUnsaveAssetData);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.DataTable_SingleKeyPicker_DT
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTableIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    KeyToPick                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          PickedKeyValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   NotFound                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANinjaLive_PresetManager_C::DataTable_SingleKeyPicker_DT(class UDataTable* DataTableIn, const class FString& KeyToPick, class FString* PickedKeyValue, bool* NotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "DataTable_SingleKeyPicker_DT");

	Params::NinjaLive_PresetManager_C_DataTable_SingleKeyPicker_DT Parms{};

	Parms.DataTableIn = DataTableIn;
	Parms.KeyToPick = std::move(KeyToPick);

	UObject::ProcessEvent(Func, &Parms);

	if (PickedKeyValue != nullptr)
		*PickedKeyValue = std::move(Parms.PickedKeyValue);

	if (NotFound != nullptr)
		*NotFound = Parms.NotFound;
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.Preset_SingleKeyPicker_DT
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    PresetName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    KeyToPick                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UDataTable**                      DataTable                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          PickedKeyValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::Preset_SingleKeyPicker_DT(const class FString& PresetName, const class FString& KeyToPick, class UDataTable** DataTable, class FString* PickedKeyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "Preset_SingleKeyPicker_DT");

	Params::NinjaLive_PresetManager_C_Preset_SingleKeyPicker_DT Parms{};

	Parms.PresetName = std::move(PresetName);
	Parms.KeyToPick = std::move(KeyToPick);

	UObject::ProcessEvent(Func, &Parms);

	if (DataTable != nullptr)
		*DataTable = Parms.DataTable;

	if (PickedKeyValue != nullptr)
		*PickedKeyValue = std::move(Parms.PickedKeyValue);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.AssetDataFromObject
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          InputObject                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAssetData*                      ComboAssetData                                         (Parm, OutParm, HasGetValueTypeHash)
// class FName*                            Object_Path                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            Package_Name                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            Package_Path                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            Asset_Name                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            Asset_Class                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::AssetDataFromObject(class UObject* InputObject, struct FAssetData* ComboAssetData, class FName* Object_Path, class FName* Package_Name, class FName* Package_Path, class FName* Asset_Name, class FName* Asset_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "AssetDataFromObject");

	Params::NinjaLive_PresetManager_C_AssetDataFromObject Parms{};

	Parms.InputObject = InputObject;

	UObject::ProcessEvent(Func, &Parms);

	if (ComboAssetData != nullptr)
		*ComboAssetData = std::move(Parms.ComboAssetData);

	if (Object_Path != nullptr)
		*Object_Path = Parms.Object_Path;

	if (Package_Name != nullptr)
		*Package_Name = Parms.Package_Name;

	if (Package_Path != nullptr)
		*Package_Path = Parms.Package_Path;

	if (Asset_Name != nullptr)
		*Asset_Name = Parms.Asset_Name;

	if (Asset_Class != nullptr)
		*Asset_Class = Parms.Asset_Class;
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.Preset_to_InternalCSV_to_DT_Saver
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OverWriteFlag                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    VarAsString                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    SelectedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>&                    AssetPaths                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             AssetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::Preset_to_InternalCSV_to_DT_Saver(bool OverWriteFlag, const class FString& VarAsString, const class FString& SelectedItem, TArray<class FName>& AssetPaths, class FName AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "Preset_to_InternalCSV_to_DT_Saver");

	Params::NinjaLive_PresetManager_C_Preset_to_InternalCSV_to_DT_Saver Parms{};

	Parms.OverWriteFlag = OverWriteFlag;
	Parms.VarAsString = std::move(VarAsString);
	Parms.SelectedItem = std::move(SelectedItem);
	Parms.AssetPaths = std::move(AssetPaths);
	Parms.AssetName = AssetName;

	UObject::ProcessEvent(Func, &Parms);

	AssetPaths = std::move(Parms.AssetPaths);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.RenderTargetExportSingle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           TextureRenderTarget                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InternalSave                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sRGB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoAlpha                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SaveWithDialog                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             InternalFilePath                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExternalFilePath                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    FileName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Extension                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FName*                            SavedAssetPath                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAssetData*                      SavedAssetData                                         (Parm, OutParm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::RenderTargetExportSingle(class UTextureRenderTarget2D* TextureRenderTarget, bool InternalSave, bool sRGB, bool NoAlpha, bool SaveWithDialog, class FName InternalFilePath, class FName ExternalFilePath, const class FString& FileName, const class FString& Extension, class FName* SavedAssetPath, struct FAssetData* SavedAssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "RenderTargetExportSingle");

	Params::NinjaLive_PresetManager_C_RenderTargetExportSingle Parms{};

	Parms.TextureRenderTarget = TextureRenderTarget;
	Parms.InternalSave = InternalSave;
	Parms.sRGB = sRGB;
	Parms.NoAlpha = NoAlpha;
	Parms.SaveWithDialog = SaveWithDialog;
	Parms.InternalFilePath = InternalFilePath;
	Parms.ExternalFilePath = ExternalFilePath;
	Parms.FileName = std::move(FileName);
	Parms.Extension = std::move(Extension);

	UObject::ProcessEvent(Func, &Parms);

	if (SavedAssetPath != nullptr)
		*SavedAssetPath = Parms.SavedAssetPath;

	if (SavedAssetData != nullptr)
		*SavedAssetData = std::move(Parms.SavedAssetData);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.SetAssetNameAndPath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            AssetTrimmedName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            AssetPath                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::SetAssetNameAndPath(const class UObject* Object, class FName* AssetTrimmedName, class FName* AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "SetAssetNameAndPath");

	Params::NinjaLive_PresetManager_C_SetAssetNameAndPath Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	if (AssetTrimmedName != nullptr)
		*AssetTrimmedName = Parms.AssetTrimmedName;

	if (AssetPath != nullptr)
		*AssetPath = Parms.AssetPath;
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ANinjaLive_PresetManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5");

	Params::NinjaLive_PresetManager_C_InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_4");

	Params::NinjaLive_PresetManager_C_InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3");

	Params::NinjaLive_PresetManager_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2");

	Params::NinjaLive_PresetManager_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_1");

	Params::NinjaLive_PresetManager_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_0");

	Params::NinjaLive_PresetManager_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "ReceiveTick");

	Params::NinjaLive_PresetManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ANinjaLive_PresetManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.WriteDataTableFunction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       InputTable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    InputData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::WriteDataTableFunction(class UDataTable* InputTable, const class FString& InputData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "WriteDataTableFunction");

	Params::NinjaLive_PresetManager_C_WriteDataTableFunction Parms{};

	Parms.InputTable = InputTable;
	Parms.InputData = std::move(InputData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.OnDensityMapSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SavePaintBuffer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANinjaLive_PresetManager_C::OnDensityMapSave(bool SavePaintBuffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "OnDensityMapSave");

	Params::NinjaLive_PresetManager_C_OnDensityMapSave Parms{};

	Parms.SavePaintBuffer = SavePaintBuffer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaLive_PresetManager.NinjaLive_PresetManager_C.ExecuteUbergraph_NinjaLive_PresetManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANinjaLive_PresetManager_C::ExecuteUbergraph_NinjaLive_PresetManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaLive_PresetManager_C", "ExecuteUbergraph_NinjaLive_PresetManager");

	Params::NinjaLive_PresetManager_C_ExecuteUbergraph_NinjaLive_PresetManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

