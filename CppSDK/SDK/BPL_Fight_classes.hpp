#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_Fight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_Fight.BPL_Fight_C
// 0x0000 (0x0030 - 0x0030)
class UBPL_Fight_C final : public UBlueprintFunctionLibrary
{
public:
	static void 添加标签(class ATsBaseCharacter_C* 角色, const struct FGameplayTag& 标签, class UObject* __WorldContext);
	static void 清除标签(class ATsBaseCharacter_C* 角色, const struct FGameplayTag& 标签, class UObject* __WorldContext);
	static bool 是否有标签(class ATsBaseCharacter_C* 角色, const struct FGameplayTag& 标签, class UObject* __WorldContext);
	static void 获取游戏实例(class UObject* __WorldContext, class UBP_MainGameInstance_C** AsBP_Main_Game_Instance);
	static void 获取Actor周围坐标点(class AActor* Actor, float 旋转, float 仰角, float 长度, class UObject* __WorldContext, struct FVectorDouble* 坐标点);
	static bool 射线检测(class UObject* Context, const struct FVectorDouble& Start, const struct FVectorDouble& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, EDrawDebugTrace DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void 角度转化(float Input, class UObject* __WorldContext, float* Output);
	static void 计算曲线值(float 已经过时间, float 总时间, class UCurveFloat* 曲线, class UObject* __WorldContext, float* 百分比);
	static void 计算向量曲线值(float 已经经过时间, float 总时间, class UCurveVector* 向量曲线, class UObject* __WorldContext, struct FVector* 向量值);
	static void 获取目标周围坐标点(const struct FRotator& 目标旋转, const struct FVectorDouble& 目标坐标, float 旋转, float 仰角, float 长度, class UObject* __WorldContext, struct FVectorDouble* 坐标点);
	static void 设置材质效果(class ATsBaseCharacter_C* 设置对象, class UPD_CharacterControllerData_C* 材质配置, class UObject* __WorldContext, int32* Handle);
	static void 删除材质效果(class ATsBaseCharacter_C* 设置对象_, int32 Handle_, class UObject* __WorldContext);

	static void 反应伤害倍率计算(float 角色1反应精通, float 角色2反应精通, class UObject* __WorldContext, float* Result);

	void 使用GE(class ATsBaseCharacter_C* 使用者, class ATsBaseCharacter_C* 目标, int32 GE的等级, const struct FGameplayTagContainer& 添加AssetTags, const struct FGameplayTagContainer& 添加GrantedTags, int32 层数, float Duration, class UClass* GE的类型, const struct FKuroGameplayParameterContainer& GE的参数, class UObject* __WorldContext, struct FActiveGameplayEffectHandle* ActiveHandle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_Fight_C">();
	}
	static class UBPL_Fight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_Fight_C>();
	}
};
static_assert(alignof(UBPL_Fight_C) == 0x000008, "Wrong alignment on UBPL_Fight_C");
static_assert(sizeof(UBPL_Fight_C) == 0x000030, "Wrong size on UBPL_Fight_C");

}

