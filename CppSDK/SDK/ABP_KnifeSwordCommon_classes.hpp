#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_KnifeSwordCommon

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EWeaponViewName_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_KnifeSwordCommon.ABP_KnifeSwordCommon_C
// 0x1930 (0x1F90 - 0x0660)
class UABP_KnifeSwordCommon_C : public UAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0660(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0668(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_37;                 // 0x06A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_36;                 // 0x06C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_35;                 // 0x06F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_34;                 // 0x0718(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_33;                 // 0x0740(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_32;                 // 0x0768(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_31;                 // 0x0790(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_30;                 // 0x07B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_29;                 // 0x07E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_28;                 // 0x0808(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_27;                 // 0x0830(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_26;                 // 0x0858(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_25;                 // 0x0880(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_24;                 // 0x08A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_23;                 // 0x08D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x08F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x0920(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x0948(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x0970(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x0998(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_17;                   // 0x09C0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_21;                      // 0x0A50(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_16;                   // 0x0A88(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_20;                      // 0x0B18(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_15;                   // 0x0B50(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_19;                      // 0x0BE0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x0C18(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_18;                      // 0x0CA8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x0CE0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_17;                      // 0x0D70(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x0DA8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_16;                      // 0x0E38(0x0038)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_15;                      // 0x0E70(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x0EA8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x0F38(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x0F70(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x1000(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x1038(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x10C8(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x1100(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x1248(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x1280(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x12A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x12D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x12F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x1320(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x1348(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x1370(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x1398(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x13C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x13E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x1410(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x1438(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x1460(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x1488(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x14B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x14D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1500(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1528(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1550(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x15E0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x1618(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x16A8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x16E0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x1770(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x17A8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x1838(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x1870(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x1900(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x1938(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x19C8(0x0038)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x1A00(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x1A38(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1AC8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1B00(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1B90(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1BC8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1C58(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1C90(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1DD8(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1E10(0x0148)()
	class ATsBaseCharacter_C*                     角色蓝图;                                          // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         当前武器突破等级;                                  // 0x1F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否正在播放隐藏特效;                              // 0x1F64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EWeaponViewName                               UI界面;                                            // 0x1F65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F66[0x2];                                     // 0x1F66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsUiSceneRoleActor_C*                  UI界面组件;                                        // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          主动关闭武器;                                      // 0x1F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F71[0x3];                                     // 0x1F71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Open_Delay;                                        // 0x1F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Time;                                        // 0x1F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeaponOpen;                                        // 0x1F7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          武器在背后;                                        // 0x1F7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUI;                                              // 0x1F7E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7F[0x1];                                     // 0x1F7F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         武器突破等级;                                      // 0x1F80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_KnifeSwordCommon(int32 EntryPoint);
	void Set_Open_Delay();
	void Clear_Open_Delay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_4E56CE4F4FC40B67A815FA9E5121120B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_C6778E804B46F910E60C4097B0E0682B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_E032E67F4DE82F7460EB1A8DD9B48F09();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_664AB34B4D035CEABB0C418E78AAF70C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_61EE4F984DCA22D42A72A98F6C4BFC8E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_854AF24B4A653398F1C33AA206F8D6D2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_0C0D79934A5A037639593FA2CB3E2E93();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_4DFF12FF4847EA4DB7F53A91C3131BD0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_B43171FB45751BE56495909E0DABD355();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_F3A465D5478E4A2437A6B98BAAE96C91();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_1C7BA9E1439EBB8F10A3DD8FBD4EBB45();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_4EB6A0AD4AD2F2BED3EE148447494A98();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_DDA8FE174DA35F32201ECF8D1F0AC000();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_6B25961C4D91BD1A86E679B9DF1722FA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_1104B3D34ABB146519ADB59C07CE33E5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_F22DFB8C48938E608C8B4FAB96176238();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_BD88B3E741281B8E6A930094F6FEBCAA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_D59A6A4E4DB9956F52F3E6A2AE303BB0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_41012E9C47286273648C7D9F6FF2597E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_E00BEE7745981B76F40C6BA1307CF8A9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_63CB659041245489CD552B98E7BBD9A8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_AFC942E14466B76135991F9A059E61CC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_D8AA1FAD4BBC9587AE3579B81C8F6888();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_2C47528C4EBC1C3AA6B611BA1D48DD4E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_41EC7C5648974B735550789F6FAE749B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_KnifeSwordCommon_AnimGraphNode_TransitionResult_9BB528CB4D57D317414E1C95FF134290();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_KnifeSwordCommon_C">();
	}
	static class UABP_KnifeSwordCommon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_KnifeSwordCommon_C>();
	}
};
static_assert(alignof(UABP_KnifeSwordCommon_C) == 0x000010, "Wrong alignment on UABP_KnifeSwordCommon_C");
static_assert(sizeof(UABP_KnifeSwordCommon_C) == 0x001F90, "Wrong size on UABP_KnifeSwordCommon_C");
static_assert(offsetof(UABP_KnifeSwordCommon_C, UberGraphFrame) == 0x000660, "Member 'UABP_KnifeSwordCommon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_Root) == 0x000668, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_37) == 0x0006A0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_37' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_36) == 0x0006C8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_36' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_35) == 0x0006F0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_35' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_34) == 0x000718, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_34' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_33) == 0x000740, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_33' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_32) == 0x000768, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_32' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_31) == 0x000790, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_31' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_30) == 0x0007B8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_30' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_29) == 0x0007E0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_29' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_28) == 0x000808, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_28' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_27) == 0x000830, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_27' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_26) == 0x000858, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_26' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_25) == 0x000880, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_25' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_24) == 0x0008A8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_24' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_23) == 0x0008D0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_23' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_22) == 0x0008F8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_21) == 0x000920, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_20) == 0x000948, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_19) == 0x000970, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_18) == 0x000998, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_17) == 0x0009C0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_17' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_21) == 0x000A50, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_21' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_16) == 0x000A88, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_16' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_20) == 0x000B18, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_20' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_15) == 0x000B50, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_15' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_19) == 0x000BE0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_19' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_14) == 0x000C18, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_18) == 0x000CA8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_18' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_13) == 0x000CE0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_17) == 0x000D70, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_17' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_12) == 0x000DA8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_16) == 0x000E38, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_16' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_15) == 0x000E70, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_15' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_11) == 0x000EA8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_14) == 0x000F38, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_10) == 0x000F70, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_13) == 0x001000, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_9) == 0x001038, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_12) == 0x0010C8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateMachine_2) == 0x001100, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_11) == 0x001248, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_17) == 0x001280, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_16) == 0x0012A8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_15) == 0x0012D0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_14) == 0x0012F8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_13) == 0x001320, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_12) == 0x001348, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_11) == 0x001370, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_10) == 0x001398, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_9) == 0x0013C0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_8) == 0x0013E8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_7) == 0x001410, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_6) == 0x001438, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_5) == 0x001460, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_4) == 0x001488, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_3) == 0x0014B0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_2) == 0x0014D8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult_1) == 0x001500, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_TransitionResult) == 0x001528, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_8) == 0x001550, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_10) == 0x0015E0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_7) == 0x001618, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_9) == 0x0016A8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_6) == 0x0016E0, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_8) == 0x001770, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_5) == 0x0017A8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_7) == 0x001838, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_4) == 0x001870, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_6) == 0x001900, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_3) == 0x001938, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_5) == 0x0019C8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_4) == 0x001A00, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_2) == 0x001A38, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_3) == 0x001AC8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer_1) == 0x001B00, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_2) == 0x001B90, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_SequencePlayer) == 0x001BC8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult_1) == 0x001C58, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateMachine_1) == 0x001C90, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateResult) == 0x001DD8, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, AnimGraphNode_StateMachine) == 0x001E10, "Member 'UABP_KnifeSwordCommon_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 角色蓝图) == 0x001F58, "Member 'UABP_KnifeSwordCommon_C::角色蓝图' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 当前武器突破等级) == 0x001F60, "Member 'UABP_KnifeSwordCommon_C::当前武器突破等级' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 是否正在播放隐藏特效) == 0x001F64, "Member 'UABP_KnifeSwordCommon_C::是否正在播放隐藏特效' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, UI界面) == 0x001F65, "Member 'UABP_KnifeSwordCommon_C::UI界面' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, UI界面组件) == 0x001F68, "Member 'UABP_KnifeSwordCommon_C::UI界面组件' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 主动关闭武器) == 0x001F70, "Member 'UABP_KnifeSwordCommon_C::主动关闭武器' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, Open_Delay) == 0x001F74, "Member 'UABP_KnifeSwordCommon_C::Open_Delay' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, Delta_Time) == 0x001F78, "Member 'UABP_KnifeSwordCommon_C::Delta_Time' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, WeaponOpen) == 0x001F7C, "Member 'UABP_KnifeSwordCommon_C::WeaponOpen' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 武器在背后) == 0x001F7D, "Member 'UABP_KnifeSwordCommon_C::武器在背后' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, IsUI) == 0x001F7E, "Member 'UABP_KnifeSwordCommon_C::IsUI' has a wrong offset!");
static_assert(offsetof(UABP_KnifeSwordCommon_C, 武器突破等级) == 0x001F80, "Member 'UABP_KnifeSwordCommon_C::武器突破等级' has a wrong offset!");

}

