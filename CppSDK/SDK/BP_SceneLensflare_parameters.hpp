#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneLensflare

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK::Params
{

// Function BP_SceneLensflare.BP_SceneLensflare_C.ExecuteUbergraph_BP_SceneLensflare
// 0x0020 (0x0020 - 0x0000)
struct BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial_2;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial_1;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare");
static_assert(sizeof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare) == 0x000020, "Wrong size on BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, EntryPoint) == 0x000000, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial_2) == 0x000008, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial_2' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial_1) == 0x000010, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial_1' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial) == 0x000018, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialGlare
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialGlare final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialGlare");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialGlare");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialGlare::DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialHalo
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialHalo final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialHalo");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialHalo");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialHalo::DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialGhost
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialGhost final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialGhost");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialGhost");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialGhost::DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.GetCustomGhostParameter
// 0x0080 (0x0080 - 0x0000)
struct BP_SceneLensflare_C_GetCustomGhostParameter final
{
public:
	struct FLensflareSamplerActorGhostParameter   ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FLensflareSamplerActorGhostParameter   K2Node_MakeStruct_LensflareSamplerActorGhostParameter; // 0x0040(0x0040)(NoDestructor)
};
static_assert(alignof(BP_SceneLensflare_C_GetCustomGhostParameter) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_GetCustomGhostParameter");
static_assert(sizeof(BP_SceneLensflare_C_GetCustomGhostParameter) == 0x000080, "Wrong size on BP_SceneLensflare_C_GetCustomGhostParameter");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomGhostParameter, ReturnValue) == 0x000000, "Member 'BP_SceneLensflare_C_GetCustomGhostParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomGhostParameter, K2Node_MakeStruct_LensflareSamplerActorGhostParameter) == 0x000040, "Member 'BP_SceneLensflare_C_GetCustomGhostParameter::K2Node_MakeStruct_LensflareSamplerActorGhostParameter' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.GetCustomHaloParameter
// 0x0090 (0x0090 - 0x0000)
struct BP_SceneLensflare_C_GetCustomHaloParameter final
{
public:
	struct FLensflareSamplerActorHaloParameter    ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FLensflareSamplerActorHaloParameter    K2Node_MakeStruct_LensflareSamplerActorHaloParameter; // 0x0048(0x0048)(NoDestructor)
};
static_assert(alignof(BP_SceneLensflare_C_GetCustomHaloParameter) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_GetCustomHaloParameter");
static_assert(sizeof(BP_SceneLensflare_C_GetCustomHaloParameter) == 0x000090, "Wrong size on BP_SceneLensflare_C_GetCustomHaloParameter");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomHaloParameter, ReturnValue) == 0x000000, "Member 'BP_SceneLensflare_C_GetCustomHaloParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomHaloParameter, K2Node_MakeStruct_LensflareSamplerActorHaloParameter) == 0x000048, "Member 'BP_SceneLensflare_C_GetCustomHaloParameter::K2Node_MakeStruct_LensflareSamplerActorHaloParameter' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.GetCustomGlareParameter
// 0x00A0 (0x00A0 - 0x0000)
struct BP_SceneLensflare_C_GetCustomGlareParameter final
{
public:
	struct FLensflareSamplerActorGlareParameter   ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FLensflareSamplerActorGlareParameter   K2Node_MakeStruct_LensflareSamplerActorGlareParameter; // 0x0050(0x0050)(NoDestructor)
};
static_assert(alignof(BP_SceneLensflare_C_GetCustomGlareParameter) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_GetCustomGlareParameter");
static_assert(sizeof(BP_SceneLensflare_C_GetCustomGlareParameter) == 0x0000A0, "Wrong size on BP_SceneLensflare_C_GetCustomGlareParameter");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomGlareParameter, ReturnValue) == 0x000000, "Member 'BP_SceneLensflare_C_GetCustomGlareParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_GetCustomGlareParameter, K2Node_MakeStruct_LensflareSamplerActorGlareParameter) == 0x000050, "Member 'BP_SceneLensflare_C_GetCustomGlareParameter::K2Node_MakeStruct_LensflareSamplerActorGlareParameter' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.GetLensflareParameter
// 0x0010 (0x0010 - 0x0000)
struct BP_SceneLensflare_C_GetLensflareParameter final
{
public:
	struct FLensflareSamplerActorParameter        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FLensflareSamplerActorParameter        K2Node_MakeStruct_LensflareSamplerActorParameter;  // 0x0008(0x0008)(NoDestructor)
};
static_assert(alignof(BP_SceneLensflare_C_GetLensflareParameter) == 0x000004, "Wrong alignment on BP_SceneLensflare_C_GetLensflareParameter");
static_assert(sizeof(BP_SceneLensflare_C_GetLensflareParameter) == 0x000010, "Wrong size on BP_SceneLensflare_C_GetLensflareParameter");
static_assert(offsetof(BP_SceneLensflare_C_GetLensflareParameter, ReturnValue) == 0x000000, "Member 'BP_SceneLensflare_C_GetLensflareParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_GetLensflareParameter, K2Node_MakeStruct_LensflareSamplerActorParameter) == 0x000008, "Member 'BP_SceneLensflare_C_GetLensflareParameter::K2Node_MakeStruct_LensflareSamplerActorParameter' has a wrong offset!");

}

