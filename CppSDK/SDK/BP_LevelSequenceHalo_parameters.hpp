#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelSequenceHalo

#include "Basic.hpp"

#include "E_BillboardMode_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_LevelSequenceHalo.BP_LevelSequenceHalo_C.ExecuteUbergraph_BP_LevelSequenceHalo
// 0x0008 (0x0008 - 0x0000)
struct BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo) == 0x000004, "Wrong alignment on BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo");
static_assert(sizeof(BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo) == 0x000008, "Wrong size on BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo");
static_assert(offsetof(BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo, EntryPoint) == 0x000000, "Member 'BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_LevelSequenceHalo_C_ExecuteUbergraph_BP_LevelSequenceHalo::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_LevelSequenceHalo.BP_LevelSequenceHalo_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_LevelSequenceHalo_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceHalo_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_LevelSequenceHalo_C_ReceiveTick");
static_assert(sizeof(BP_LevelSequenceHalo_C_ReceiveTick) == 0x000004, "Wrong size on BP_LevelSequenceHalo_C_ReceiveTick");
static_assert(offsetof(BP_LevelSequenceHalo_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_LevelSequenceHalo_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_LevelSequenceHalo.BP_LevelSequenceHalo_C.UpdateHaloParameter
// 0x00CC (0x00CC - 0x0000)
struct BP_LevelSequenceHalo_C_UpdateHaloParameter final
{
public:
	bool                                          UpdateComponent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ___name_Variable;                                  // 0x0004(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_1;                                // 0x0010(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BillboardMode                               ___byte_Variable;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ___float_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___float_Variable_1;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___float_Variable_2;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_2;                                // 0x002C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_3;                                // 0x0038(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_4;                                // 0x0044(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ___name_Variable_5;                                // 0x0054(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_6;                                // 0x0094(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceHalo_C_UpdateHaloParameter) == 0x000004, "Wrong alignment on BP_LevelSequenceHalo_C_UpdateHaloParameter");
static_assert(sizeof(BP_LevelSequenceHalo_C_UpdateHaloParameter) == 0x0000CC, "Wrong size on BP_LevelSequenceHalo_C_UpdateHaloParameter");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, UpdateComponent) == 0x000000, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::UpdateComponent' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable) == 0x000004, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_1) == 0x000010, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___byte_Variable) == 0x00001C, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___float_Variable) == 0x000020, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___float_Variable' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___float_Variable_1) == 0x000024, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___float_Variable_2) == 0x000028, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_2) == 0x00002C, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_3) == 0x000038, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_4) == 0x000044, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_5) == 0x000054, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, K2Node_Select_Default) == 0x000060, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor) == 0x00006C, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000080, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000084, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, ___name_Variable_6) == 0x000094, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::___name_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000A0, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000A4, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor_1) == 0x0000A8, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000B8, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor_2) == 0x0000BC, "Member 'BP_LevelSequenceHalo_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");

// Function BP_LevelSequenceHalo.BP_LevelSequenceHalo_C.GetHaloDrawParameters
// 0x0010 (0x0010 - 0x0000)
struct BP_LevelSequenceHalo_C_GetHaloDrawParameters final
{
public:
	float                                         MinDrawDistance_0;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawDistance_0;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDrawRange_0;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawRange_0;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceHalo_C_GetHaloDrawParameters) == 0x000004, "Wrong alignment on BP_LevelSequenceHalo_C_GetHaloDrawParameters");
static_assert(sizeof(BP_LevelSequenceHalo_C_GetHaloDrawParameters) == 0x000010, "Wrong size on BP_LevelSequenceHalo_C_GetHaloDrawParameters");
static_assert(offsetof(BP_LevelSequenceHalo_C_GetHaloDrawParameters, MinDrawDistance_0) == 0x000000, "Member 'BP_LevelSequenceHalo_C_GetHaloDrawParameters::MinDrawDistance_0' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_GetHaloDrawParameters, MaxDrawDistance_0) == 0x000004, "Member 'BP_LevelSequenceHalo_C_GetHaloDrawParameters::MaxDrawDistance_0' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_GetHaloDrawParameters, MinDrawRange_0) == 0x000008, "Member 'BP_LevelSequenceHalo_C_GetHaloDrawParameters::MinDrawRange_0' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_GetHaloDrawParameters, MaxDrawRange_0) == 0x00000C, "Member 'BP_LevelSequenceHalo_C_GetHaloDrawParameters::MaxDrawRange_0' has a wrong offset!");

// Function BP_LevelSequenceHalo.BP_LevelSequenceHalo_C.Update
// 0x0028 (0x0028 - 0x0000)
struct BP_LevelSequenceHalo_C_Update final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceHalo_C_Update) == 0x000008, "Wrong alignment on BP_LevelSequenceHalo_C_Update");
static_assert(sizeof(BP_LevelSequenceHalo_C_Update) == 0x000028, "Wrong size on BP_LevelSequenceHalo_C_Update");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_GetMaterial_ReturnValue) == 0x000010, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000018, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceHalo_C_Update, CallFunc_SetStaticMesh_ReturnValue) == 0x000020, "Member 'BP_LevelSequenceHalo_C_Update::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

}

